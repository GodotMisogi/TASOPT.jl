MODELNAME = "TEsys";
AUTHOR    = "Prashanth";
#include <System.fnc>


setThermoPackage("GasTbl");
#include "TEsys.mdl"


#include "printDetails.fnc"
#include "utils.fnc"
#include "save_solver.fnc"

void printSolverConditions (){
		string Sname = "solver";
		string indeps[] = Sname->independentNames;
		real indepVals[] = Sname -> independentValues;

		string deps[] = Sname->list("Dependent", FALSE );
		cout << Sname << " Independent Variables:" << endl;
		int i;
		string var;
		for (i=0; i<indeps.entries(); i++) {
		var = indeps[i]->varName;
		cout << " " << i+1 << " " << indeps[i] << ": \n\t"
		<< var <<" = "<<indepVals[i]<< var.units << endl;
		}
		
		cout << Sname << " Dependent Conditions:" << endl;
		string lhs, rhs;
		for (i=0; i<deps.entries(); i++) {
		lhs = deps[i]->eq_lhs;
		rhs = deps[i]->eq_rhs;
		cout << " " << i+1 << " " << deps[i] << ": \n\t"
		<< lhs << " = " << rhs << endl;
		}

}


//====================
// Solver setup:
//====================
solver.maxIterations = 500;
solver.maxJacobians  = 500;
solver.firstNewJacobian = "CALCULATE";
// solver.regenNewJacobian = "EVERY_ITERATION";
// solver.debugLevel = "ITERATION_DETAILS";
// solver.diagnosticFile = "solver.diag";
// solver.solutionMode = "ONE_PASS";
solver.defaultDxLimit = 0.05;
// solver.defaultPerturbation = 0.01;
// solver.convergenceLimit = 0.8;
// solver.defaultTolerance = 1e-10;
// solver.defaultTolerance = 1e-8;
//---------------------------------------------

int first;
int true  = 1;
int false = 0;
real deNOx_target, Tt41, N2_dmd, Fn_target, Pelecmotor, FnSplitTarget;
int flag;
string inString;

Eng.PCEC.setOption("switchMode", "ON");
Eng.setOption("switchDes","DESIGN");

OutFileStream logfile{
    filename = "TEsys.log";
}
CaseRowViewer Output {
    outStreamHandle = "logfile";
	titleBody = "???????????????????? \t run on: ?????????\t		at: ?????????? by: ??????\t Model Author: ??????????" ;
	titleVars = {"MODELNAME","date","timeOfDay","USER","AUTHOR"}		
	caseHeaderBody ="";
	caseHeaderVars = {}
    #include "TEsys.lst"
    showHeaders = -1;
}

postsolverSequence.append("Output");

//---------------------------------------------
// Solver guesses
//---------------------------------------------
// real solverIndeps111[] = { 8.54549, 4701.4, 1069.49, 0.162575, 0.459619, 26.2961,
//  4302.49, 535.427, 0.161435, 3.76299, 17.1722, 4098.26, 61.1551, 9612.66, 280.855 };
real solverIndeps111[] = { 16.2975, 2316.38, 1076.82, 0.138928, 0.377295, 11.868, 2519.17, 721.546, 0.127468, 3.28825, 16.9419, 4284.05, 151.984, 5014.43, 471.3};
// real solverIndeps222[] ={ 4820.93, 2295.09, 0.631357, 966.575, 1.57596, 13.0545, 2.239,
//  2.01887, 4.81329, 8.68941, 40128.4, 5084.73, 11915.5, 3123.46, 214.647, 1.46468, 635.297, 18973.9, 6148.03 };
// real solverIndeps222[] ={ 879.326, 0.721656, 1173.33, 1.54771, 13.1937, 0.842919, 1.92293, 4.72535, 10.5777, 38132, 7837.2, 14184, 3718.12, 167.294, 1.57662, 318.009, 14522.6, 4705.7 };
// real solverIndeps222[] ={ 5216.57, 2506.03, 0.687761, 1236.5, 1.68419, 18.3473, 3.15545, 2.0175, 3.33907, 6.84022, 41875.7, 5398.35, 9845.91, 2106.9, 325.113, 1.27913, 1168.6, 11263, 4706.45 };
real solverIndeps222[] ={ 6798.11, 3254.54, 0.847855, 944.928, 1.64556, 9.55472, 1.25646, 1.99455, 4.06351, 8.11708, 38316.5, 5871.17, 12343.1, 3382.14, 379.766, 1.37363, 1531.56, 11160.7, 4390.75 };

// Removed Noz Pri: 
// real solverIndeps222[] ={ 1463.62, 1.13827, 922.322, 1.63761, 7.04608, 3.305, 2.02903, 4.11954, 2.02725, 40439.5, 3877.2, 9436.5, 2264.56, 315.254, 1.50816, 861.229, 8925.72, 3511.5 };
//---------------------------------------------
// Start looping: 
//---------------------------------------------
while(flag!=999){
// Output.display();
    cin >> flag;
    if(flag == 999){
        break;
    }

    if(flag==111){
        flag = 0;
        inString = cin.getline();
        //====================
        //  Read input file
        //====================
        // cerr<<" ----------- inside des -------"<<endl;
        // cerr<<inString<<endl;
        parseString(inString);

        Eng.setOption("switchDes","DESIGN");
        solverIndeps111={ 16.2975, 2316.38, 1076.82, 0.138928, 0.377295*120*430/Eng.FusEng.LHV, 11.868, 2519.17, 721.546, 0.127468, 3.28825, 16.9419, 4284.05, 151.984, 5014.43, 471.3};

        //====================
        //Auto solver setup
        //====================
        solver.clear();
        autoSolverSetup();
        // printSolverConditions();
        //====================
        //  Run engine model
        //====================
        // Include this here directly to save on IO costs:
        solver.independentNames = {"Eng.ind_BPR",
                                    "Eng.ind_FnSplit",
                                    "Eng.ind_Motor_ShP",
                                    "Eng.ind_TCLA_NC_fracW",
                                    "Eng.DESIGN_FUELFLOW",
                                    "Eng.ind_Acat",
                                    "Eng.ind_FanSpeed",
                                    "Eng.DESIGN_AIRFLOW",
                                    "Eng.ind_TCLA_CH_fracW",
                                    "Eng.TrbH.S_map.ind_PRbase",
                                    "Eng.TrbL.S_map.ind_PRbase",
                                    "Eng.GB.ind_trq",
                                    "Eng.PodProp.ind_Win",
                                    "Eng.PodProp.ind_Nmech",
                                    "Eng.PodProp.GB.ind_trq" };
        solver.independentValues = solverIndeps111;
        run();
        // Output.update();
        CASE++;
        //---------------------------------------------
        // Gen speed check:
        // cerr<<Eng.Gen.Nmech<<"\t"<<Eng.CmpF.Nmech<<endl;
        // cerr<<Eng.ShL.Nmech<<"\t"<<Eng.ShF.Nmech<<endl;
        // cerr<<Eng.GB.Sh_O2.Nmech<<"\t"<<Eng.GB.Sh_O1.Nmech<<endl;
        // cerr<<Eng.GB.gearRatio<<endl;
        // cerr<<Eng.GB.dep_Nmatch.autoSetup<<endl;
        //---------------------------------------------
        // Motor speeds check:
        // cerr<<Eng.PodProp.MotorShaft.Nmech<<"\t"<<Eng.PodProp.FanShaft.Nmech<<endl;
        // cerr<<Eng.PodProp.GB.Sh_O2.Nmech<<"\t"<<Eng.PodProp.GB.Sh_O1.Nmech<<endl;
        //====================
        // Outputs
        //====================
        // MsgBlock1( "Number of Iterations to solve = "+toStr(solver.iterationCounter));
        if(solver.converged == 1){
            solverIndeps111 = solver.independentValues;
            
            // Write following outputs to outstream
            cout<<"1"<<"_"                                     // Success/ Failure indicator
            <<Eng.FusEng.Wfuel/2.205<<"_"
            <<Eng.PCEC.deNOx<<"_"
            <<Eng.PCEC.m_cat<<"_"
            <<Eng.BrnPri.EINOx<<"_"
            <<Eng.BrnPri.Fl_I.W/2.205<<"_"
            <<Eng.CmpH.Fl_O.Tt*100/180<<"_"
            <<Eng.CmpH.Fl_O.Pt/Eng.InEng.Fl_I.Pt<<"_"
            <<Eng.CmpH.Fl_O.Wc<<"_"
            <<Eng.FusEng.LHV<<"_"
            <<Eng.FsEng.Fl_O.W<<"_"

            <<Eng.PodProp.Motor.SP*1000<<"_"
            <<19*1000<<"_"
            <<Eng.Gen.SP*1000<<"_"
            <<Eng.Gen.ShP*getUnitsFactor("hp", "W")/(Eng.Wtshaft/9.81)<<"_"
            
            
            <<-Eng.PodProp.Fan.pwr*getUnitsFactor(Eng.PodProp.Fan.pwr.units, "W")<<"_"
            <<Eng.PodProp.Motor.Pelec<<"_"
            <<Eng.Gen.Pelec<<"_"
            <<Eng.Gen.ShP*getUnitsFactor(Eng.Gen.ShP.units, "W")<<"_"

            <<Eng.Gen.mass<<"_"
            <<Eng.PodProp.Motor.mass<<"_"
            <<Eng.Wtshaft<<"_"
            <<Eng.Waftfan<<"_"
            <<Eng.PodProp.Wfan<<"_"

            <<Eng.CmpF.dia*0.0254<<"_"
            <<Eng.PodProp.Fan.dia*0.0254<<"_"
            
            <<Eng.GB.Wgb<<"_"

            <<Eng.BrnPri.FAR<<"_"

            <<Eng.Snace1<<"_"
            <<Eng.PodProp.Snace1<<"_"

            <<Eng.TrbH.F041.Tt<<"_"
            <<Eng.NozPri.Fl_O.Tt*100/180<<"_"
            // <<Eng.PCEC.Fl_O.Tt<<"_"
            
            <<Eng.PodProp.Motor.eff<<"_"
            <<0.98<<"_"
            <<Eng.Gen.eff<<"_"
            <<Eng.IdealThermalEff<<"_"
            
            <<Eng.PodProp.GB.Wgb<<"_"
            <<Eng.Gen.V<<"_"
            // Aft fan shaft power
            <<-Eng.CmpF.pwr*getUnitsFactor(Eng.CmpF.pwr.units, "W");
            
            
            // cerr<<solverIndeps111<<endl;

        }
        else{
            cerr<<inString<<endl;
            // output.reopen();
            // // #include "write_des_output.int"
            // output.close();
            // cout<<"ERROR! DES Did not converge"<<endl;
            cout<<"0"; // Tell's Julia that this didn't converge
            Output.update();
            quit();
        }


    }

    if(flag==222){
        flag = 0;
        inString = cin.getline();
        //====================
        //  Read input file
        //====================
        // cerr<<" ----------- inside off des -------"<<endl;

        // Fn_target      = 40e3;
        // Tt41           = 3000;
        // Eng.Amb.alt_in = 33000.0;
        // Eng.Amb.MN_in  = 0.8;
        // deNOx_target   = 0.98;
        // FnSplitTarget  = 0.8;
        // Eng.n_poddedprops = 8;
        // Eng.CmpF.PRdes    = 1.4;
        // Eng.CmpH.PRdes    = 12.0;

        // Eng.PodProp.Fan.PRdes = 1.4;
        // Eng.InEng.Kinl        = 0.0;
        // Eng.PodProp.InEng.Kinl= 0.0;
        // Eng.Phiinl            = 0.0;
        // Eng.PodProp.Phiinl    = 0.0;


        Eng.setOption("switchDes","OFFDESIGN");
        //====================
        //Auto solver setup
        //====================
        solver.clear();
        autoSolverSetup();

        //====================
        //Run engine model
        //====================

                // solver.independentNames = {"Eng.ind"
                //     "Eng.ind_Motor_ShP",
                // "Eng.DESIGN_FUELFLOW",
                // "Eng.FsEng.ind_W",
                // "Eng.CmpF.S_map.ind_RlineMap",
                // "Eng.Splt.ind_BPR",
                // "Eng.CmpL.S_map.ind_RlineMap",
                // "Eng.CmpH.S_map.ind_RlineMap",
                // "Eng.TrbH.S_map.ind_PRbase",
                // "Eng.TrbL.S_map.ind_PRbase",
                // "Eng.ShH.ind_Nmech",
                // "Eng.GB.ind_trq",
                // "Eng.ShL.ind_Nmech",
                // "Eng.ShF.ind_Nmech",
                // "Eng.PodProp.FsEng.ind_W",
                // "Eng.PodProp.Fan.S_map.ind_RlineMap",
                // "Eng.PodProp.GB.ind_trq",
                // "Eng.PodProp.MotorShaft.ind_Nmech",
                // "Eng.PodProp.FanShaft.ind_Nmech" };

        parseString(inString);// this has the first flag so has to be before the check below
        if(first){
                while((Eng.Amb.alt > 0.0) && (Eng.Amb.MN >0.2)){
                    Eng.Amb.alt_in = Eng.Amb.alt*0.8;
                    Eng.Amb.MN_in  = Eng.Amb.MN *0.8;
                    run();
                    solverIndeps222 = solver.independentValues;

                }
          
        solver.independentValues = solverIndeps222;
        }
        // cerr<<"input Guess val is "<<Eng.ind_FnSplit.x<<endl;
        // else {
            // restart("offDes_fan_prev.restart");
            // restart("offDes1.restart");
        // }
        // cerr<<Eng.FusEng.LHV<<endl;
        // cerr<<inString<<endl;
        run();
        CASE++;

        //====================
        // Outputs
        //====================
        // MsgBlock1( "Number of Iterations to solve = "+toStr(solver.iterationCounter));
        if(solver.converged == 1){
            if(first){

                solverIndeps222 = solver.independentValues;
            }


            // Write following outputs to outstream
            // ShP, eta_thermal, mdotf, BSFC, deNOx 
            cout<<"1"<<"_"                                     // Success/ Failure indicator
            <<Eng.FusEng.Wfuel/2.205<<"_"
            <<Eng.PCEC.deNOx<<"_"
            <<Eng.Perf.Fn_total_N<<"_"
            <<Eng.BrnPri.EINOx<<"_"
            <<Eng.BrnPri.Fl_I.W/2.205<<"_"
            <<Eng.CmpH.Fl_O.Tt*100/180<<"_"
            <<Eng.CmpH.Fl_O.Pt/Eng.InEng.Fl_I.Pt<<"_"
            <<Eng.CmpH.Fl_O.Wc<<"_"
            <<Eng.FsEng.Fl_O.W<<"_"

            <<-Eng.PodProp.Fan.pwr*getUnitsFactor(Eng.PodProp.Fan.pwr.units, "W")<<"_"
            <<Eng.PodProp.Motor.Pelec<<"_"
            <<Eng.Gen.Pelec<<"_"
            <<Eng.Gen.ShP*getUnitsFactor(Eng.Gen.ShP.units, "W")<<"_"

            <<Eng.BrnPri.FAR<<"_"
            <<Eng.TrbH.F041.Tt<<"_"
            <<Eng.NozPri.Fl_O.Tt*100/180<<"_"
            // <<Eng.PCEC.Fl_O.Tt<<"_"
            
            <<Eng.PodProp.Motor.eff<<"_"
            <<0.99<<"_"
            <<Eng.Gen.eff<<"_"
            <<Eng.IdealThermalEff<<"_"
            // Solver indeps at each mission point
            <<Eng.ind_FnSplit.x<<"_"
            <<Eng.ind_Motor_ShP.x<<"_"
            <<Eng.DESIGN_FUELFLOW.x<<"_"
            <<Eng.FsEng.ind_W.x<<"_"
            <<Eng.CmpF.S_map.ind_RlineMap.x<<"_"
            <<Eng.Splt.ind_BPR.x<<"_"
            <<Eng.CmpL.S_map.ind_RlineMap.x<<"_"
            <<Eng.CmpH.S_map.ind_RlineMap.x<<"_"
            <<Eng.TrbH.S_map.ind_PRbase.x<<"_"
            <<Eng.TrbL.S_map.ind_PRbase.x<<"_"
            <<Eng.ShH.ind_Nmech.x<<"_"
            <<Eng.GB.ind_trq.x<<"_"
            <<Eng.ShL.ind_Nmech.x<<"_"
            <<Eng.ShF.ind_Nmech.x<<"_"
            <<Eng.PodProp.FsEng.ind_W.x<<"_"
            <<Eng.PodProp.Fan.S_map.ind_RlineMap.x<<"_"
            <<Eng.PodProp.GB.ind_trq.x<<"_"
            <<Eng.PodProp.MotorShaft.ind_Nmech.x<<"_"
            <<Eng.PodProp.FanShaft.ind_Nmech.x;
            // cerr<<Eng.ind_FnSplit.x<<endl;
        }
        else{
            cerr<<inString<<endl;
            cerr<<solver.dependentNames<<endl;
            cerr<<solver.errorConverged<<endl;
            cerr<<solver.updateConverged<<endl;
            cerr<<solver.independentValues<<endl;
            cerr<<solver.independentNames<<endl;
            Output.update();
            cout<<"0"; // Tell's Julia that this didn't converge
            // cout<<"ERROR! OFFDES Did not converge"<<endl;
            quit();
        }

    }
    if(flag==333){
        flag = 0;
        inString = cin.getline();

        Eng.setOption("switchDes","OFFDESIGN");
        Eng.OFFDES2();
        //====================
        //Auto solver setup
        //====================
        solver.clear();
        autoSolverSetup();

        //====================
        //  Read input file
        //====================
        parseString(inString);
        //====================
        //Run engine model
        //====================

        if(first){
            solver.independentValues = solverIndeps222;

        }
        // else {
            // restart("offDes_fan_prev.restart");
            // restart("offDes1.restart");
        // }
        run();
        CASE++;

        //====================
        // Outputs
        //====================
        // MsgBlock1( "Number of Iterations to solve = "+toStr(solver.iterationCounter));
        if(solver.converged == 1){
            if(first){
                // SaveIndepVals("solver", "offDes1.restart");
                // solverIndeps2 = solver.independentValues;
            }


            // Write following outputs to outstream
            // ShP, eta_thermal, mdotf, BSFC, deNOx 
            cout<<"1"<<"_"                                     // Success/ Failure indicator
            <<Eng.FusEng.Wfuel/2.205<<"_"
            <<Eng.PCEC.deNOx<<"_"
            <<Eng.Perf.Fn_total_N<<"_"
            <<Eng.BrnPri.EINOx<<"_"
            <<Eng.BrnPri.Fl_I.W/2.205<<"_"
            <<Eng.CmpH.Fl_O.Tt*100/180<<"_"
            <<Eng.CmpH.Fl_O.Pt/Eng.InEng.Fl_I.Pt<<"_"
            <<Eng.CmpH.Fl_O.Wc<<"_"
            <<Eng.FsEng.Fl_O.W<<"_"

            <<-Eng.PodProp.Fan.pwr*getUnitsFactor(Eng.PodProp.Fan.pwr.units, "W")<<"_"
            <<Eng.PodProp.Motor.Pelec<<"_"
            <<Eng.Gen.Pelec<<"_"
            <<Eng.Gen.ShP*getUnitsFactor(Eng.Gen.ShP.units, "W")<<"_"

            <<Eng.BrnPri.FAR<<"_"
            <<Eng.TrbH.F041.Tt<<"_"
            <<Eng.NozPri.Fl_O.Tt*100/180<<"_"
            
            <<Eng.PodProp.Motor.eff<<"_"
            <<0.99<<"_"
            <<Eng.Gen.eff<<"_"
            <<Eng.IdealThermalEff<<"_"
            
            // Solver indeps at each mission point
            <<Eng.ind_FnSplit.x<<"_"
            <<Eng.ind_Motor_ShP.x<<"_"
            <<Eng.DESIGN_FUELFLOW.x<<"_"
            <<Eng.FsEng.ind_W.x<<"_"
            <<Eng.CmpF.S_map.ind_RlineMap.x<<"_"
            <<Eng.Splt.ind_BPR.x<<"_"
            <<Eng.CmpL.S_map.ind_RlineMap.x<<"_"
            <<Eng.CmpH.S_map.ind_RlineMap.x<<"_"
            <<Eng.TrbH.S_map.ind_PRbase.x<<"_"
            <<Eng.TrbL.S_map.ind_PRbase.x<<"_"
            <<Eng.ShH.ind_Nmech.x<<"_"
            <<Eng.GB.ind_trq.x<<"_"
            <<Eng.ShL.ind_Nmech.x<<"_"
            <<Eng.ShF.ind_Nmech.x<<"_"
            <<Eng.PodProp.FsEng.ind_W.x<<"_"
            <<Eng.PodProp.Fan.S_map.ind_RlineMap.x<<"_"
            <<Eng.PodProp.GB.ind_trq.x<<"_"
            <<Eng.PodProp.MotorShaft.ind_Nmech.x<<"_"
            <<Eng.PodProp.FanShaft.ind_Nmech.x;

        }
        else{

            cout<<"0"; // Tell's Julia that this didn't converge
            // cout<<"ERROR! OFFDES Did not converge"<<endl;
        }

    }
}