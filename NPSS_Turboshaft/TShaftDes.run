//------------------------------------------------------------------------
//                                                                       |
//   File Name:     Tshaft.run                                           |
//   Date(s):       January 2nd, 2021                                    |
//   Author:        Prakash Prashanth                                    |
//                                                                       |
//   Description:   Turboshaft engine for integration with TAESOPT       |
//                                                                       |
//------------------------------------------------------------------------
real start_time = cpuTime;
// #include <winsock2.h>
// #include <ws2tcpip.h>
// #pragma comment(lib, "Ws2_32.lib")

MODELNAME = "Turboshaft engine";
AUTHOR    = "Prashanth";

setThermoPackage("GasTbl");
real includes_time = cpuTime;
#include "TShaft.mdl"
#include "printDetails.fnc"
#include "utils.fnc"
#include "save_solver.fnc"

int Ldiag = FALSE;
// Define true and false to make it easier to use from Julia
int true  = 1;
int false = 0;

//====================
//Read input file
//====================
#include "EngineInputs.inp"
Eng.setOption("switchDes", "DESIGN");
Eng.PCEC.setOption("switchMode","ON");

// Eng.Gen.ShP_dmd = SHP_dmd;
Eng.ShP.HPX = SHP_dmd*getUnitsFactor("W", "hp");

//====================
//Auto solver setup
//====================
solver.clear();
autoSolverSetup(); // All setup in variable changed method in TShaft.mdl
// printSolverDetails();
OutFileStream diag {
    filename = "Des_solver.diag"; append = TRUE;
}

//====================
// Solver setup:
//====================
solver.maxIterations = 200;
solver.maxJacobians  = 200;
// solver.debugLevel = "ITERATION_DETAILS";
// solver.diagnosticFile = "solver.diag";
// solver.solutionMode = "ONE_PASS";
// solver.defaultDxLimit = 0.001;
// solver.defaultPerturbation = 0.0001;
// solver.convergenceLimit = 0.8;
// solver.defaultTolerance = 1e-10;

//====================
//Run engine model
//====================
if( first == 1){
    restart("des.restart");
}
if(first == 0){
    restart("des_prev_converged.restart");
}

real start_run = cpuTime;
run();
real end_run = cpuTime;
if(Ldiag){
    diag<<first<<"> ShP demand = "<<SHP_dmd<<"\t iter to converge = "<<solver.iterationCounter<<endl;
    diag<<"Run time = "<<end_run - start_run<<endl;
}
// MsgBlock1( "Number of Iterations to solve = "+toStr(solver.iterationCounter));
if(solver.converged == 1){
    if (Eng.switchDes == "DESIGN") {
        SaveIndepVals("solver", "des.restart");
    }
    if (first == 1){
        SaveIndepVals("solver", "des_prev_converged.restart");
    }
}
else{
    cout<<"ERROR! Did not converge"<<endl;
}

// real N2_dmd = 30000.;
// Tt41 = 3100;
// Eng.setOption("switchDes", "OFFDESIGN");
// autoSolverSetup();
// // printSolverConditions();
// run();
// MsgBlock1( "Number of Iterations to solve = "+toStr(solver.iterationCounter));


//====================
// Outputs
//====================

OutFileStream output {
    filename = "Eng.output"; //autoFlush = FALSE;
}
real start_write = cpuTime;
parseFile("write_des_output.int");

#include "saveTShaftDes.fnc"
real end_time = cpuTime;
real end_write = cpuTime;
if(Ldiag){
    diag<<"Write time = "<<end_write- start_write<<endl;
    diag<<"Total time = "<<end_time- start_time<<endl;
}
