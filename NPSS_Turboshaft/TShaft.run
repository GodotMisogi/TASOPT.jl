//------------------------------------------------------------------------
//                                                                       |
//   File Name:     Tshaft.run                                           |
//   Date(s):       January 2nd, 2021                                    |
//   Author:        Prakash Prashanth                                    |
//                                                                       |
//   Description:   Turboshaft engine for integration with TAESOPT       |
//                                                                       |
//------------------------------------------------------------------------
MODELNAME = "Turboshaft engine";
AUTHOR    = "Prashanth";

setThermoPackage("GasTbl");
#include "TShaft.mdl"
#include "printDetails.fnc"
#include "utils.fnc"
#include "save_solver.fnc"

// Eng.PCEC.setOption("switchMode", "ON");

//====================
//Read input file
//====================
#include "EngineInputs.inp"

// Eng.Gen.ShP_dmd = SHP_dmd;
Eng.Gen.ShP_dmd = SHP_dmd;
// Eng.ShP.HPX = SHP_dmd*getUnitsFactor("W", "hp");

if (Eng.switchDes == "DESIGN") {
    Eng.DESIGN_TARGET_Tt41.eq_rhs = toStr(Tt41);
    Eng.dep_deNOx.eq_rhs = toStr(deNOx_target);
}
//====================
//Auto solver setup
//====================
solver.clear();
autoSolverSetup(); // All setup in variable changed method in TShaft.mdl

// printSolverDetails();

//====================
// Solver setup:
//====================
solver.maxIterations = 200;
solver.maxJacobians  = 200;
// solver.debugLevel = "ITERATION_DETAILS";
// solver.diagnosticFile = "solver.diag";
// solver.solutionMode = "ONE_PASS";
// solver.defaultDxLimit = 0.001;
// solver.defaultPerturbation = 0.0001;
// solver.convergenceLimit = 0.8;
solver.defaultTolerance = 1e-10;

//====================
//Run engine model
//====================
if (Eng.switchDes == "DESIGN") {
    restart("temp.restart");
}
run();

// MsgBlock1( "Number of Iterations to solve = "+toStr(solver.iterationCounter));
if(solver.converged == 1){
    if (Eng.switchDes == "DESIGN") {
        SaveIndepVals("solver", "temp.restart");
    }
}
else{
    cout<<"ERROR! Did not converge"<<endl;
}
// cout<<Eng.ShP.trqNet<<endl;
// cout<<Eng.ShH.trqNet<<endl;
// cout<<Eng.ShP.pwrNet<<endl;
// cout<<Eng.ShH.pwrNet<<endl;

// Eng.setOption("switchDes", "OFFDESIGN");
// // cout<<Eng.CmpH.switchDes<<endl;
// // solver.clear();
// autoSolverSetup();
// Eng.Amb.alt_in = 30000;
// Eng.Amb.MN_in = 0.78;
// Eng.Gen.ShP_dmd = 10e6;
// Eng.dep_N2.eq_rhs = "30000";
// // Eng.ShP.HPX = 25e6*getUnitsFactor("W", "hp");
// // printSolverDetails();
// run();
// // cout<<Eng.ShP.pwrIn<<endl;
// // MsgBlock1( "Number of Iterations to solve = "+toStr(solver.iterationCounter));



//====================
// Outputs
//====================
OutFileStream output {
    filename = "Eng.output"; 
}

output<<"# Julia readable file of engine output.\n# Date:"+ date + " Time:" + timeOfDay<<endl<<endl;
output<<"mdot = "<<Eng.FsEng.W_in/2.205<<"\t#kg/s"<<endl;
output<<"mdotf = "<<Eng.FusEng.Wfuel/2.205<<"\t#kg/s"<<endl;
output<<"eta_thermal = "<<Eng.Perf.IdealThermalEff<<endl;
// output<<"ShP = "<<Eng.Gen.ShP_dmd/getUnitsFactor("hp", "kW")<<"#\t kW"<<endl;
output<<"ShP = "<<Eng.Gen.ShP_dmd<<"\t# " + Eng.Gen.ShP_dmd.units<<endl;
output<<"Ngen = "<<Eng.ShP.Nmech<<"\t# " + Eng.ShP.Nmech.units<<endl;
// output<<"ShP = "<<Eng.ShP.HPX<<"\t# " + Eng.ShP.HPX.units<<endl;
output<<"OPR = "<<Eng.CmpH.Fl_O.Pt/Eng.CmpL.Fl_I.Pt<<endl;
output<<"BSFC = "<<Eng.Perf.BSFC<<endl;
output<<"Tt41 = "<<Eng.TrbH.F041.Tt<<"\t#" +Eng.TrbH.F041.Tt.units<<endl;
output<<"Tt3 = "<<Eng.CmpH.Fl_O.Tt <<"\t#" +Eng.CmpH.Fl_O.Tt.units<<endl;

output<<"\n# PCEC related outputs"<<endl;
output<<"deNOx = "<<Eng.PCEC.deNOx <<endl;
output<<"mcat = "<<Eng.PCEC.m_cat <<"\t# kg"<<endl;
output<<"Af = "<<Eng.PCEC.Af <<"\t#"+ Eng.PCEC.Af.units<<endl;
output<<"lcat = "<<Eng.PCEC.l <<"\t#"+ Eng.PCEC.l.units<<endl;
output<<"Diff_NOx = "<<Eng.PCEC.Deff <<"\t#"+ Eng.PCEC.Deff.units<<endl;
output<<"t_res = "<<Eng.PCEC.t_res <<"\t#"+ Eng.PCEC.t_res.units<<endl;
output<<"dPqP = "<<Eng.PCEC.dPqP<<"\t#"+ Eng.PCEC.dPqP.units<<endl;
// output<<"OFA = "<<Eng.PCEC.OFA<<endl;
output<<"d_hy = "<<Eng.PCEC.d_hy<<endl;
output<<"cpsi = "<<Eng.PCEC.cpsi<<endl;
output<<"w = "<<Eng.PCEC.w<<"\t#"+ Eng.PCEC.w.units<<endl;

output<<"\n# MapScalars"<<endl;
output<<"LPCscalars = ["<<Eng.CmpL.S_map.s_effDes<<", "<<Eng.CmpL.S_map.s_PRdes<<", "<<Eng.CmpL.S_map.s_WcDes<<", "<<Eng.CmpL.S_map.s_NcDes<<"]"<<endl;
output<<"HPCscalars = ["<<Eng.CmpH.S_map.s_effDes<<", "<<Eng.CmpH.S_map.s_PRdes<<", "<<Eng.CmpH.S_map.s_WcDes<<", "<<Eng.CmpH.S_map.s_NcDes<<"]"<<endl;

output<<"HPTscalars = ["<<Eng.TrbH.S_map.s_effDes<<", "<<Eng.TrbH.S_map.s_PRdes<<", "<<Eng.TrbH.S_map.s_WpDes<<", "<<Eng.TrbH.S_map.s_NpDes<<"]"<<endl;
output<<"PTscalars = ["<<Eng.TrbP.S_map.s_effDes<<", "<<Eng.TrbP.S_map.s_PRdes<<", "<<Eng.TrbP.S_map.s_WpDes<<", "<<Eng.TrbP.S_map.s_NpDes<<"]"<<endl;

real LPC[] = {Eng.CmpL.S_map.NcMapDes , 
                Eng.CmpL.S_map.WcMapDes , 
                Eng.CmpL.S_map.PRmapDes , 
                Eng.CmpL.S_map.effMapDes, 
                Eng.CmpL.S_map.RlineMapDes
                };
output<<strFmt1D("\nLPC = [", "%12.4f,", LPC,LPC.entries(),5)<<"]"<<endl;

real HPC[] = {Eng.CmpH.S_map.NcMapDes , 
                Eng.CmpH.S_map.WcMapDes , 
                Eng.CmpH.S_map.PRmapDes , 
                Eng.CmpH.S_map.effMapDes, 
                Eng.CmpH.S_map.RlineMapDes
                };
output<<strFmt1D("HPC = [", "%12.4f,",HPC,HPC.entries(),5)<<"]"<<endl;

real HPT[] = {Eng.TrbH.S_map.PRmapDes, Eng.TrbH.S_map.NpMapDes};
output<<strFmt1D("HPT = [", "%12.4f,",HPT,HPT.entries(),5)<<"]"<<endl;

real PT[] = {Eng.TrbP.S_map.PRmapDes, Eng.TrbP.S_map.NpMapDes};
output<<strFmt1D("PT = [", "%12.4f,",PT,PT.entries(),5)<<"]"<<endl;

output<<"\nNozArea    = "<<Eng.NozPri.AthCold << "\t # in^2"<<endl<<endl;

output<<"\n# BleedFracs"<<endl;
output<<"TCLA_NC = "<<Eng.B030.TCLA_NC.fracW<<endl;
output<<"TCLA_CH = "<<Eng.B030.TCLA_CH.fracW<<endl;

real Areas[] = {Eng.FsEng.Fl_O.Aphy     ,
                Eng.InEng.Fl_O.Aphy     ,
                Eng.CmpL.Fl_O.Aphy      ,
                Eng.D025.Fl_O.Aphy      ,
                Eng.CmpH.Fl_O.Aphy      ,
                Eng.B030.Fl_O.Aphy      ,
                Eng.BrnPri.Fl_O.Aphy    ,
                Eng.TrbH.Fl_O.Aphy      ,
                Eng.D050.Fl_O.Aphy      ,
                Eng.TrbP.Fl_O.Aphy      ,
                Eng.D060.Fl_O.Aphy      ,
                Eng.PCEC.Fl_O.Aphy      ,
                Eng.NozPri.Fl_O.Aphy  };

output<<strFmt1D("\nAreas = [", "%12.4f,", Areas,Areas.entries(),5)<<"]"<<endl;



