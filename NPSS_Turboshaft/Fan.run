//------------------------------------------------------------------------
//                                                                       |
//   File Name:     Fan.run                                              |
//   Date(s):       February 9th, 2021                                   |
//   Author:        Prakash Prashanth                                    |
//                                                                       |
//   Description:   Ducted fan for integration with TAESOPT              |
//                                                                       |
//------------------------------------------------------------------------
MODELNAME = "Ducted Fan";
AUTHOR    = "Prashanth";
#include <System.fnc>
setThermoPackage("GasTbl");
#include "DuctedFan.mdl"

#include "printDetails.fnc"
#include "utils.fnc"
#include "save_solver.fnc"

//====================
// Solver setup:
//====================
solver.maxIterations = 200;
solver.maxJacobians  = 200;
// solver.debugLevel = "ITERATION_DETAILS";
// solver.diagnosticFile = "solver.diag";
// solver.solutionMode = "ONE_PASS";
solver.defaultDxLimit = 0.05;
// solver.defaultPerturbation = 0.0001;
// solver.convergenceLimit = 0.8;
// solver.defaultTolerance = 1e-10;

OutFileStream output {
    filename = "Fan.output"; autoFlush = TRUE;
}
// Set up a log file to track/ debug and just generally enjoy NPSS output
OutFileStream logfile{
    filename = "Fan.log";
}
CaseRowViewer Output {
    outStreamHandle = "logfile";
	titleBody = "???????????????????? \t run on: ?????????\t		at: ?????????? by: ??????\t Model Author: ??????????" ;
	titleVars = {"MODELNAME","date","timeOfDay","USER","AUTHOR"}		
	caseHeaderBody ="";
	caseHeaderVars = {}
    #include "Fan_details.lst"
    showHeaders = -1;
}
// postsolverSequence.append("Output");

real t_start, t_end;
real t_to_solve;
int first;
int true  = 1;
int false = 0;
real ShP_input;
real Fn_target, NcPct_target;
real Alt[];
int flag;
string inString;

// Start looping: 
while(flag!=999){

    cin >> flag;
    if(flag == 999){
        break;
    }

    if(flag==111){
        flag = 0;
        inString = cin.getline();
        //====================
        //  Read input file
        //====================
        // #include "FanInputs.inp"
        parseString(inString);
        DuctedFan.setOption("switchDes","DESIGN");
        //====================
        //Auto solver setup
        //====================
        solver.clear();
        autoSolverSetup();

        //====================
        //  Run engine model
        //====================
        restart("fandes.restart");
        t_start = wallTime;
        run();
        t_end = wallTime;
        t_to_solve = t_end - t_start;
        CASE++;

        //====================
        // Outputs
        //====================
        // MsgBlock1( "Number of Iterations to solve = "+toStr(solver.iterationCounter));
        if(solver.converged == 1){
            // output.reopen();
            // #include "write_fan_des.int"
            // output.close();

            // cout<<"1";
            
            // Want the following outputs:
            // Dfan, Fan_power, Torque_fan, N_fan, Mtip,
            // eta_prop, eta_DF,
            // NozArea
            cout<<"1"<<"_"
            <<convertUnits("DuctedFan.Fan.dia", "m")<<"_"
            <<convertUnits("DuctedFan.Fan.pwr", "kW")<<"_"
            <<convertUnits("DuctedFan.Fan.trq", "N*m")<<"_"
            <<convertUnits("DuctedFan.Fan.Nmech", "rpm")<<"_"
            <<DuctedFan.Fan.Mtip<<"_"
            <<DuctedFan.eta_prop<<"_"
            <<DuctedFan.eta_DF<<"_"
            <<DuctedFan.FanNozzle.AthCold;
        }
        else{
            // cout<<"ERROR! DES Did not converge"<<endl;
            cout<<"0"; // Tell's Julia that this didn't converge
        }


    }

    if(flag==222){
        flag = 0;
        inString = cin.getline();
        //====================
        //  Read input file
        //====================
        parseString(inString);
        DuctedFan.setOption("switchDes","OFFDESIGN");
        //====================
        //Auto solver setup
        //====================
        solver.clear();
        autoSolverSetup();

        //====================
        //Run engine model
        //====================

        if(first){
            // restart("offDes_fan_start.restart");
        }
        // else {
        //     restart("offDes_fan_prev.restart");
        // }
        t_start = wallTime;
        run();
        t_end = wallTime;
        t_to_solve = t_end - t_start;
        
        CASE++;

        //====================
        // Outputs
        //====================
        // MsgBlock1( "Number of Iterations to solve = "+toStr(solver.iterationCounter));
        if(solver.converged == 1){
            if(first){
                SaveIndepVals("solver", "offDes_fan_start.restart");
            }
            // output.reopen();
            // #include "write_fan_offdes.int"
            // output.close();
            // cout<<"1";


            // Write following outputs to outstream
            // Fn, Fan_power, Torque_fan, N_fan, Mtip, eta_prop, eta_DF
            cout<<"1"<<"_"
            <<DuctedFan.Fn_N<<"_"
            <<convertUnits("DuctedFan.Fan.pwr", "kW")<<"_"
            <<convertUnits("DuctedFan.Fan.trq", "N*m")<<"_"
            <<convertUnits("DuctedFan.Fan.Nmech", "rpm")<<"_"
            <<DuctedFan.Fan.Mtip<<"_"
            <<DuctedFan.eta_prop<<"_"
            <<DuctedFan.eta_DF;
        }
        else{
            cout<<"0"; // Tell's Julia that this didn't converge
            // cout<<"ERROR! OFFDES Did not converge"<<endl;
        }

    }

}

Output.display();