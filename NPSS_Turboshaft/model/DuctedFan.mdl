//------------------------------------------------------------------------
//                                                                       |
//   File Name:     DuctedFan.mdl                                        |
//   Date(s):       January 4, 2021                                      |
//   Author:        Prakash Prashanth                                    |
//                                                                       |
//   Description:   Ducted fan for turbo-electric                        |
//                                                                       |
//------------------------------------------------------------------------

//------------------------------------------------------------------------
//                            Model Definition 
//------------------------------------------------------------------------

Assembly Assembly DuctedFan
{
    // 1. Assembly level elements for solution control, interfacing, and power setting
	Option switchDes {
		description = "Determines if the ducted fan assembly is in design or off-design mode";
		IOstatus = "input";
		rewritableValues = FALSE;
		trigger = TRUE;
		allowedValues = {"DESIGN","OFFDESIGN"};
	}
    // 2. Free Stream definition - establish ambient conditions
    // ------------------------------
    // Ambient Amb
    // ------------------------------
    Element Ambient Amb
    {
        setOption( "switchMode", "ALDTMN" );
        setOption( "switchDay" , "STD" );
        // alt_in    = 0.0 "ft";
        dTs_in    = 0.0 "dF";
        // MN_in     = 0.25;
    }
    // 3. Flow start
    // ------------------------------
    // InletStart FsEng
    // ------------------------------
    Element InletStart FsEng
    {
        AmbientName = "Amb";
        setOption("switchInd" , "W");
		//Precalculate how much airflow needs to go through for a given area, 
		//MN and flow conditions.	
        W_in = 60.0;
		real theta_0;
		void postexecute(){
			theta_0 = Fl_O.Tt/518.67;
		}
    }
    // 4. Inlet
    // ------------------------------
    // Inlet InEng
    // ------------------------------
    Element Inlet InEng
    {
		PqP_in = 0.998;		
		Fl_O.MNdes = 0.5;

        // Account for inlet KE defect if ingesting BL:
        real sbar, Kinl, asq;
        real W, Ts, Rs, gam;
        real Pt2, Tt2; 
        Kinl = 50e3; // Based of D8 fuselage TE KE defect as an example. 
                     // Needs to be reset in the run file correctly!
        void postexecute()
        {
            W  = Fl_O.W *getUnitsFactor(Fl_O.W.units, "kg/sec");
            Ts = Fl_O.Ts * 100/180;
            Rs = Fl_O.Rs *getUnitsFactor(Fl_I.Rs.units, "J/(kg*K)");
            gam = Fl_O.gams;
            asq = gam * Rs * Ts;
            sbar = (gam * Kinl)/(W * asq);
            Pt2 = Fl_O.Pt/exp(sbar); // psia
            Tt2 = Fl_O.Tt;           // dR

            Fl_O.setTotalTP(Tt2, Pt2);

        }
	}

    Element Compressor Fan 
    {
		PRdes  = 1.4;
		effDes = 0.91;
		#include "fanCFM56.map"
		Sh_O.inertia = 10.;     // slugs-ft**2.
		real dia {value = 0; units = "in";}
        real dT, Ts, Rs, a, Vtip;
        real HTR, Mtip; // Hub-tip ratio and Mtip
        HTR = 0.34;
		void postexecute()
		{
			dia	= (Fl_I.Aphy*4/3.1415/(1-HTR**2))**0.5;
			dT = (Fl_O.Tt - Fl_I.Tt)*100/180; //temp diff in K

            Ts = Fl_I.Ts * 100/180;
            Rs = Fl_I.Rs *getUnitsFactor(Fl_I.Rs.units, "J/(kg*K)");

            a  = sqrt(Fl_I.gams * Ts *Rs);
            Vtip = 2*PI*Nmech/60 * dia/2 * getUnitsFactor(dia.units, "m");
            Mtip = Vtip/a;
		}
		Fl_O.MNdes = 0.46;
	}	

    Element Duct FanDuct
    {
        switchDP = "INPUT";

		void preexecute()
		{
			dPqP_in = 0.1 * Fl_I.MN * Fl_I.MN;
		}
		Fl_O.MNdes = 0.4;
    }

    Element Nozzle FanNozzle
    {
        PsExhName = "Amb.Ps";
		switchType = "CON_DIV";
		switchCoef = "CV";
		Cv_in = 0.98;
    }

    Element FlowEnd FlowEnd{
    }

    Element Shaft FanShaft
	{
		ShaftInputPort Sh_Fan;
		Nmech = 4000.0;
		inertia = 13.0;
    }
    
    real mdot, Vjet, Vin, Fn_N, ShP_W, dKE;
    real eta_prop, eta_DF; // Froude propulsive eff, overall ducted fan eff.
    real Phiinl, Finl;
    Phiinl = 50e3; // Example value based on D8
    void postexecute()
    {
        Vjet  = FanNozzle.Vactual*getUnitsFactor(FanNozzle.Vactual.units, "m/sec");
        Vin   = InEng.Fl_I.V * getUnitsFactor(InEng.Fl_I.V.units, "m/sec" );
        mdot  = InEng.Fl_I.W * getUnitsFactor(InEng.Fl_I.W.units, "kg/sec");
        ShP_W = FanShaft.HPX * getUnitsFactor(FanShaft.HPX.units, "W"     );
        // Effective added thrust from BLI:
        if(Vin > 0.0){
            Finl = Phiinl/Vin;
        }

        Fn_N = mdot*(Vjet - Vin) + Finl;
        dKE  = 0.5* mdot*(Vjet**2 - Vin**2);

        eta_prop = Fn_N*Vin/dKE;
        eta_DF   = - Fn_N*Vin/ShP_W; // Thrust power/ shaft power to fan (negative sign since HPX is also negative)


    }
    //------------------------------------------------------------------------
	// Component Links
	//------------------------------------------------------------------------

    linkPorts( "FsEng.Fl_O"     , "InEng.Fl_I"     , "F010"  ) ;
	linkPorts( "InEng.Fl_O"     , "Fan.Fl_I"       , "F020"  ) ;
	linkPorts( "Fan.Fl_O"       , "FanDuct.Fl_I"   , "F025"  ) ;
	linkPorts( "FanDuct.Fl_O"   , "FanNozzle.Fl_I" , "F030"  ) ;
	linkPorts( "FanNozzle.Fl_O" , "FlowEnd.Fl_I"   , "F090"  ) ;

    linkPorts( "Fan.Sh_O"       , "FanShaft.Sh_Fan"  ,  "FanWork"   ) ;

    Independent ind_ShaftPower{ varName = "FanShaft.HPX"; description = "ShaftPower from motor"; }
    Independent ind_Win{ varName = "FsEng.W_in"; description = "Mass flow rate"; }

    Dependent dep_Fn{ eq_lhs = "Fn_N"; eq_rhs = "Fn_target";}

    Independent ind_Nmech{varName = "FanShaft.Nmech"; description = "Fan shaft RPM";}
    Dependent dep_Mtip{ eq_lhs = "Fan.Mtip"; eq_rhs = "0.8";}

    void variableChanged(string name, any oldval)
	{
		if (name == "switchDes")
		{
			if (switchDes == "DESIGN")
			{
				ind_ShaftPower.autoSetup = TRUE;
                ind_Win.autoSetup        = TRUE;

                dep_Fn.autoSetup         = TRUE;

                dep_Mtip.autoSetup       = TRUE;
                ind_Nmech.autoSetup      = TRUE;
			}
			else
			{
                ind_Win.autoSetup        = FALSE; // The mass flow rate is automatically added by the NPSS solver
				ind_ShaftPower.autoSetup = TRUE;	
                dep_Fn.autoSetup         = TRUE;	
                
                dep_Mtip.autoSetup       = FALSE;
                ind_Nmech.autoSetup      = FALSE;	
			}
		}
	}

}