//------------------------------------------------------------------------
//                                                                       |
//   File Name:     Turboshaft.mdl                                       |
//   Date(s):       July 27th, 2021                                      |
//   Author:        Prakash Prashanth                                    |
//                                                                       |
//   Description:   Turboshaft engine architecture                       |
//                   with generator                                      |
//------------------------------------------------------------------------

//------------------------------------------------------------------------
//                            Model Definition 
//------------------------------------------------------------------------

Assembly Assembly Eng
{

    int n_poddedprops = 8;

	// 1. Assembly level elements for solution control, interfacing, and power setting
	Option switchDes {
		description = "Determines if the engine assembly is in design or off-design mode";
		IOstatus = "input";
		rewritableValues = FALSE;
		trigger = TRUE;
		allowedValues = {"DESIGN","OFFDESIGN"};
	}

	// 2. Free Stream definition - establish ambient conditions
    // ------------------------------
    // Ambient Amb
    // ------------------------------
    Element Ambient Amb
    {
        setOption( "switchMode", "ALDTMN" );
        setOption( "switchDay" , "STD" );
        alt_in    = 0.0 "ft";
        dTs_in    = 0.0 "dF";
        MN_in     = 0.0;
    }
    // ------------------------------
    // InletStart FsEng
    // ------------------------------
    Element InletStart FsEng
    {
        AmbientName = "Amb";
        setOption("switchInd" , "W");
		//Precalculate how much airflow needs to go through for a given area, 
		//MN and flow conditions.	
        W_in = 200.0;
		real theta_0;
		void postexecute(){
			theta_0 = Fl_O.Tt/518.67;
		}
    }
    // 3. Front Face definition - inlet drag losses and flow splitting
	// ------------------------------
    // Inlet InEng
    // ------------------------------
    Element Inlet InEng
    {
		PqP_in = 0.998;		
		Fl_O.MNdes = 0.65;

        // Account for inlet KE defect if ingesting BL:
        real sbar, Kinl, asq;
        real W, Ts, Rs, gam;
        real Pt2, Tt2; 
        Kinl = 0.e3; // Based of D8 fuselage TE KE defect as an example. 
                     // Needs to be reset in the run file correctly!
        void postexecute()
        {
            W  = Fl_O.W *getUnitsFactor(Fl_O.W.units, "kg/sec");
            Ts = Fl_O.Ts * 100/180;
            Rs = Fl_O.Rs *getUnitsFactor(Fl_I.Rs.units, "J/(kg*K)");
            gam = Fl_O.gams;
            asq = gam * Rs * Ts;
            sbar = (gam * Kinl)/(W * asq);
            Pt2 = Fl_O.Pt/exp(sbar); // psia
            Tt2 = Fl_O.Tt;           // dR

            Fl_O.setTotalTP(Tt2, Pt2);

        }
	}
	// ------------------------------
    // Inlet Drag CdragIn
    // ------------------------------
	// Element CustomerDrag CdragIn{description = "Placeholder Inlet Spillage Drag";}
	// ------------------------------
	// Compressor CmpF
	// ------------------------------
    Element Compressor CmpF
    {
		PRdes  = 1.4;
		effDes = 0.91;
		#include "fanCFM56.map"
		// NcDes = 0.95;
		// Sh_O.inertia = 10.;     // slugs-ft**2.
		real dia {value = 0; units = "in";}
        real dT, Ts, Rs, a, Vtip;
        real HTR, Mtip; // Hub-tip ratio and Mtip
        HTR = 0.3;
		void postexecute()
		{
			dia	= (Fl_I.Aphy*4/3.1415/(1-HTR**2))**0.5;
			dT = (Fl_O.Tt - Fl_I.Tt)*100/180; //temp diff in K

            Ts = Fl_I.Ts * 100/180;
            Rs = Fl_I.Rs *getUnitsFactor(Fl_I.Rs.units, "J/(kg*K)");

            a  = sqrt(Fl_I.gams * Ts *Rs);
            Vtip = 2*PI*Nmech/60 * dia/2 * getUnitsFactor(dia.units, "m");
            Mtip = sqrt((Vtip/a)**2 + Fl_I.MN**2);
		}
		Fl_O.MNdes = 0.3;
	}	

    Element Splitter Splt { 
        BPR = 15.;
        BPRdes = 14.00;
        Fl_O1.MNdes = 0.45; 
        Fl_O2.MNdes = 0.45; 
    } 

	Element Compressor CmpL {
		#include "CompressorRlineMap_NEPP_LPC.map"
		Fl_O.MNdes = 0.4; 
		// S_map.alphaMap = 0.00;
		// S_map.RlineMapDes = 2.0;
		// S_map.NcMapDes = 1.0;
		PRdes = 3.5;  
		effDes = 0.89;
	}


	// ------------------------------
    // Duct HPC Transition
    // ------------------------------
    Element Duct D025
    {
        switchDP = "INPUT";

        void preexecute()
        {
            dPqP_in = 0.2 * Fl_I.MN * Fl_I.MN;
        }
		Fl_O.MNdes = 0.31;

    }
	
	//------------------------------
	// High Pressure Compressor CmpH
	//------------------------------
	Element Compressor CmpH {
		#include <CompressorRlineMap_NEPP_HPC.map> 
		Fl_O.MNdes = 0.3; 
		S_map.alphaMap = 0.00;
		S_map.RlineMapDes = 2.0;
		S_map.NcMapDes = 1.0;
		PRdes = 10.0;  
		effDes = 0.90;
	}

	//------------------------------
	// Bleed B030
	//------------------------------
	Element Bleed B030 {
		Fl_O.MNdes = 0.4; 

		// Turbine Cooling and Leakage Air (TCLA) stream 1 (connects to turbine inlet)
		BleedOutPort TCLA_NC {	              
			fracW = 0.100;
		}
		// Turbine Cooling and Leakage Air (TCLA) stream 2 (connects to turbine exit)
		BleedOutPort TCLA_CH {	              
			fracW = 0.00;
		} 
	}
	//------------------------------
	// FuelStart FusEng
	//------------------------------
	Element FuelStart FusEng {

		Wfuel = 0.09 * 120 * 430/LHV;
		// LHV = 18400.*120/43; 
	}

	//------------------------------
	// Burner BrnPri
	//------------------------------
	Element Burner BrnPri {
		effBase = 0.99;
		dPqP_dmd = 0.07;
		Fl_O.MNdes = 0.10;

		setOption("switchBurn", "WFUEL");
		// FAR = .024225;

		real EINOx = 0;

		void postexecute(){
			// Calcualte EINOx based on P3T3 method calibrated to CFM56-5B
			real T3 = Fl_I.Tt*100/180;
			real P3 = Fl_I.Pt*getUnitsFactor(Fl_I.Pt.units, "kPa");

			real a,b,c,d;
			a = 6.25528852e-08;
			b = -1.17064467e-04;
			c = 7.36953400e-02;
			d = -1.50392850e+01;
			EINOx = P3**0.4*(a*T3**3 + b*T3**2 + c*T3 +d)*FusEng.LHV/18400; //this applies a scaling if different fuels are used

		}
	}

	//------------------------------
	// High Pressure Turbine TrbH
	//------------------------------
	Element Turbine TrbH {
		
	#include <TurbinePRmap_NEPP_HPT.map>
	FlowStation F041;
	Fl_O.MNdes = 0.30;
	effDes = 0.89;
	PRbase = 3.603;

		// Turbine Cooling and Leakage Air (TCLA) stream 1 (introduced at turbine inlet)
		InterStageBleedInPort TCLA_NC { 
			Pfract  = 1.0;
			diaPump = 0.0;
		} 

		// Turbine Cooling and Leakage Air (TCLA) stream 2 (introduced at turbine exit)
		InterStageBleedInPort TCLA_CH { 
			Pfract  = 0.0;
			diaPump = 0.0;
		}

		// Subelement to calculate the amount of cooling flow required to cool the turbine	
		Subelement CoolIt Cool {
			nStages = 1;
			bldNameFirstRow = "TCLA_NC";
			bldName = "TCLA_CH";
			TvaneDes[0] = 2100;
			TbladeDes[0] = 1930;
			s_BldFirstRow = 1.5;  
			s_Bld = 1.5;  
		}   
		void postexecute() { 
			F041.copyFlow("Fl_I");
			F041.add("TCLA_NC");
			if ( switchDes == "DESIGN" ) {
				Cool.run();
			} 	 
		} 
	}

	// ------------------------------
	// Duct D045
	// ------------------------------
	Element  Duct D045{
		Fl_O.MNdes = 0.4;
	}
	//------------------------------
	// Free Power Turbine TrbP
	//------------------------------
	Element Turbine TrbL {
		#include <TurbinePRmap_NEPP_FPT.map>
		effDes = 0.91;
		PRbase = 4.2;
		Fl_O.MNdes = 0.5;
	}

	// ------------------------------
	// Duct D050
	// ------------------------------
	Element  Duct D050{
		Fl_O.MNdes = 0.4;
	}

    // ------------------------------
	// Duct D160 MixCold
	// ------------------------------
	Element Duct D160
	{
		switchDP = "INPUT";

		void preexecute()
		{
			dPqP_in = 0.2 * Fl_I.MN * Fl_I.MN;
		}
		Fl_O.MNdes = 0.45;
	}
	//------------------------------
	// Post-combustion emissions control SCR
	//------------------------------
	Element SCR PCEC{
		Af = 19.0;
		l  = 0.0125;
		cpsi = 900;
		w    = 2.0 ;
		Fl_O.MNdes = 0.4;
	}
	Element Duct D070
	{
		switchDP = "INPUT";

		void preexecute()
		{
			dPqP_in = 0.2 * Fl_I.MN * Fl_I.MN;
		}
		Fl_O.MNdes = 0.45;
	}

	//------------------------------
	// Nozzle NozPri
	//------------------------------
	Element Nozzle NozPri {
		switchType = "CONIC";
		switchCoef = "CV";
		Cv_in = 0.99;
		// CdTh_in = 0.96;
		PsExhName = "Amb.Ps"; 
	}
	// ------------------------------
	// Nozzle NozSec
	// ------------------------------
	Element Nozzle NozSec
	{
		switchType = "CONIC";
	    switchCoef = "CV";
		Cv_in = 0.99;
		PsExhName = "Amb.Ps";
	}
	//------------------------------
	// End of Nozzle
	//------------------------------
	Element FlowEnd NozEnd {
	}
	// ------------------------------
	// Exhaust Flow End
	// ------------------------------
	Element FlowEnd FanEnd{    
    }

    Element EMachine Gen {
        switchMode = "GENERATOR";
        ShP = 3e6 "W";
        nparallel = 2;
		void preexecute(){
			rhoair = InEng.Fl_I.rhos *getUnitsFactor(InEng.Fl_I.rhos.units,"kg/m3");
			muair  = InEng.Fl_I.mus*getUnitsFactor(InEng.Fl_I.mus.units , "kg/(m*sec)");
		}
    }
	// 4. Shaft definition - HP and FPT shafts
	//------------------------------
	// HP Shaft ShH
	//------------------------------
	Element Shaft ShH {
		ShaftInputPort CmpH, TrbH;
		Nmech = 37500.;
	}
	Element Gearbox GB {
		eff = 1.0;
		gearRatio = 3.;  
	}
	//------------------------------
	// LP Shaft ShL
	//------------------------------
	Element Shaft ShL {
		ShaftInputPort GBOX, CmpL, TrbL, Gen;
		Nmech = 12000.;
	}
	Element Shaft ShF { 
		ShaftInputPort FAN, GBOX;
		Nmech = 3400.37;
		fracLoss = 0.0;
	} 

    #include <PoddedPropulsor.mdl>


	// 8. Performance calculations
	//------------------------------
	// EngPerf Perf
	//------------------------------
    real Phiinl, Finl;
	real Wtshaft, Waftfan, WGB, Wgen, Wmot, Wfan;
	real rSnace, fpylon, Snace1, feadd;
	real IdealThermalEff, fancorework, LPCwork, NetWork;
	Element EngPerf Perf {

        real Fn_total_N, FnSplit, Vin;
        real FgCore, FgFan, FfracCore, FfracFan, FfracPodProp;
        void postexecute() { 
			//---------------------------------------------
            // Calculate thrust here:
			//---------------------------------------------
			// Gross thrusts:
				FgCore = NozPri.Fg;
				// FgCore = PCEC.Fl_O.V*PCEC.Fl_O.W/C_GRAVITY;
				real CoreFg = FgCore;
				// cout<<"Fgcore = "<<FgCore<<endl;
				// cout<<"Fgcore calc = "<<NozPri.Vactual*NozPri.Fl_O.W/C_GRAVITY<<endl;
				FgFan  = NozSec.Fg;
				Fg = FgCore + FgFan + n_poddedprops*PodProp.FanNozzle.Fg;
			//Ram drag:
				Fram     = InEng.Fram; //Ram drag from Aft fan alone
				// cout<<"Fram = "<<Fram<<endl;
				// cout<<"Fram calc = "<<InEng.Fl_I.V*InEng.Fl_O.W/C_GRAVITY<<endl;

			// BLI "thrust"
				Vin = InEng.Fl_I.V * getUnitsFactor(InEng.Fl_I.V.units, "m/sec" );
				if(Vin > 0.0){
					Finl = Phiinl/Vin;
				}
            // Net thrust from Aft fans:
            Fn = FgCore + FgFan - Fram + Finl*getUnitsFactor("N", "lbf");

            Fn_total_N = Fn*getUnitsFactor("lbf", "N") + n_poddedprops*PodProp.Fn_N;

            FnSplit    = Fn*getUnitsFactor("lbf", "N")/Fn_total_N;
            // FfracCore  = NozPri.Fg/Fg;
            FfracCore  = CoreFg/Fg;
            FfracFan   = NozSec.Fg/Fg;
            FfracPodProp = n_poddedprops*PodProp.FanNozzle.Fg/Fg;

            SFC = BrnPri.Wfuel*getUnitsFactor(BrnPri.Wfuel.units, "lbm/hr")/Fn_total_N*getUnitsFactor("lbf", "N");

            // cout<<FfracCore + FfracFan + FfracPodProp<<endl;

			//---------------------------------------------
			// Calculate weights
			//---------------------------------------------

			// Tshaft weight:
			//---------------------------------------------
			if (switchDes == "DESIGN"){
			// 45.605 kg/(kg/s) from Dowdle et al
			// alt. use 38.9 kg/(kg/s)from Hall et al. https://arc.aiaa.org/doi/pdf/10.2514/6.2018-3973
			Wtshaft = (CmpL.Fl_I.W/2.205)**1.2 * 45.605 * 9.81;

			// Alt. use SP based on existing engines:
			real SPtshaft;
			// SPtshaft = 10.4e3; // Based on the RR T406 (4.58 MW power output) power density = 10.4 kW/kg. 
			//   SPtshaft = 11.2e3; // The GE38 (~5 MW) has a power density of 11.2 kW/kg
			//   SPtshaft = 4.41e3; // Based of TP400
			// SPtshaft = 8.0e3; // Rough estimate based on LEAP1B (choked flow ~ 340m/s and Fn = 130 kN P = 1/2 Fn Vj; Mass = 2780 kg)
			// Wtshaft = 9.81*(Gen.ShP*getUnitsFactor("hp", "W")*Gen.nparallel)/SPtshaft;
			// Fan and nacelle weight:
			real Dfan = CmpF.dia*0.0254; // convert to m

			Snace1 = rSnace * 0.25 * PI * Dfan**2;
			real Ainlet = 0.4*Snace1;
			real Acowl  = 0.2*Snace1;
			real Aexh   = 0.4*Snace1;

			real Wnace = 4.45*(Ainlet/0.3048**2.0) * (2.5+0.0238*Dfan/0.0254) +
                    4.45*(Acowl /0.3048**2.0) *  1.9 +
                    4.45*(Aexh  /0.3048**2.0) * (2.5+0.0363*Dfan/0.0254);
			 
			real ARfan  = 3;   //Blade aspeect ratio
			real bladesolidity = 0.4; // Blade solidity c/s
			real ktech = 0.5 ;
			real Utip  = Dfan/2* (2 * PI * CmpF.Nmech/60);
			// # Sagerser 1971, NASA TM X-2406
			// # Note: The term "weight" in Sagerser1971 is actually mass
			real mfan = ktech*(135.0 * Dfan**2.7/sqrt(ARfan) * (bladesolidity/1.25)**0.3 * (Utip/350.0)**0.3);

			Wtshaft = Wtshaft*(1+feadd);
			Waftfan = mfan*9.81 + Wnace*0.6;
			}
			//---------------------------------------------
			// Calculate thermal eff
			//---------------------------------------------
			real fuelLHV  = FusEng.LHV*getUnitsFactor(FusEng.LHV.units, "J/kg");
			real fuelflow = BrnPri.Wfuel*getUnitsFactor(BrnPri.Wfuel.units,"kg/sec");

			fancorework = -CmpF.pwr/CmpF.Fl_O.W *CmpL.Fl_I.W * getUnitsFactor(Eng.CmpF.pwr.units, "W");
			LPCwork     = -CmpL.pwr * getUnitsFactor(Eng.CmpL.pwr.units, "W");
			NetWork  =  TrbL.pwr * getUnitsFactor(Eng.TrbL.pwr.units, "W") - LPCwork - fancorework;
			IdealThermalEff = NetWork/(fuelLHV*fuelflow);


        }


	}
	//------------------------------------------------------------------------
	// Component Links
	//------------------------------------------------------------------------

	// Core stream
	linkPorts( "FsEng.Fl_O"     , "InEng.Fl_I"    , "F010"  ) ;
	linkPorts( "InEng.Fl_O"     , "CmpF.Fl_I"     , "F020"  ) ;
	linkPorts( "CmpF.Fl_O"      , "Splt.Fl_I"     , "F021"  ) ;
	linkPorts( "Splt.Fl_O1"     , "CmpL.Fl_I"     , "F022"  ) ;
	linkPorts( "CmpL.Fl_O"      , "D025.Fl_I"     , "F025"  ) ;
	linkPorts( "D025.Fl_O"      , "CmpH.Fl_I"     , "F029"  ) ;
	linkPorts( "CmpH.Fl_O"      , "B030.Fl_I"     , "F030"  ) ;
	linkPorts( "B030.Fl_O"      , "BrnPri.Fl_I"   , "F031"  ) ;
	linkPorts( "FusEng.Fu_O"    , "BrnPri.Fu_I"   , "F036"  ) ;
	linkPorts( "BrnPri.Fl_O"    , "TrbH.Fl_I"     , "F040"  ) ;
	linkPorts( "TrbH.Fl_O"      , "D045.Fl_I"     , "F045"  ) ;
	linkPorts( "D045.Fl_O"      , "TrbL.Fl_I"     , "F0451" ) ;
	linkPorts( "TrbL.Fl_O"      , "D050.Fl_I"     , "F050"  ) ;
	linkPorts( "D050.Fl_O"      , "PCEC.Fl_I"     , "F0PCEC") ;
	linkPorts( "PCEC.Fl_O"      , "D070.Fl_I"     , "F070"  ) ;
	linkPorts( "D070.Fl_O"      , "NozPri.Fl_I"   , "F080"  ) ;
	// linkPorts( "PCEC.Fl_O"    , "NozEnd.Fl_I"   , "F090"  ) ;
	linkPorts( "NozPri.Fl_O"    , "NozEnd.Fl_I"   , "F090"  ) ;

    linkPorts( "Splt.Fl_O2"  , "D160.Fl_I"   , "F160");
    linkPorts( "D160.Fl_O"   , "NozSec.Fl_I" , "F180");
    linkPorts( "NozSec.Fl_O" , "FanEnd.Fl_I" , "F190");

	// Bleed Connections
	linkPorts( "B030.TCLA_NC" , "TrbH.TCLA_NC"  ,  "TrbH_NC" );
	linkPorts( "B030.TCLA_CH" , "TrbH.TCLA_CH"  ,  "TrbH_CH" );

	// Shaft Connections
	linkPorts( "CmpF.Sh_O"   , "ShF.FAN"  ,  "CmpFWorkIn"   ) ;
	linkPorts( "GB.Sh_O1"    , "ShF.GBOX" ,  "Gbox1"        ) ;
	linkPorts( "GB.Sh_O2"    , "ShL.GBOX" ,  "Gbox2"        ) ;

	linkPorts( "CmpL.Sh_O"   , "ShL.CmpL"  ,  "CmpLWorkIn"   ) ;
	linkPorts( "TrbL.Sh_O"   , "ShL.TrbL"  ,  "TrbLWorkOut"  ) ;
	linkPorts( "Gen.Sh_O"    , "ShL.Gen"   ,  "GenWorkIn"    ) ;
	
	linkPorts( "CmpH.Sh_O"   , "ShH.CmpH"  ,  "CmpHWorkIn"   ) ;
    linkPorts( "TrbH.Sh_O"   , "ShH.TrbH"  ,  "TrbH_Work"   ) ;

	// 10. Solver settings

	//------------------------------------------------------------------------
	// Model Dependents & Independents
	//------------------------------------------------------------------------
	// Schedule tables:
	Table TB_NozArea( real NcPctMap) {
    NcPctMap = {1.0, 0.952667275, 0.908184988, 0.874570207, 0.847512509, 0.818728131, 0.788195577,
    0.753156112, 0.718007103, 0.689089465, 0.662021097, 0.633281012, 0.60435686, 0.571516365, 0.539361471,
    0.507641164, 0.484744341, 0.462551414, 0.440178111, 0.4177846}
    Rmap = {2.2, 1.983637841+0.2, 1.98609016+0.2, 1.965691587+0.2, 1.916603786+0.2, 1.86592971+0.2, 1.819890749, 1.781989358, 
    1.743961561, 1.687791742, 1.625778948, 1.578156405, 1.53211833, 1.505046214, 1.483207946, 1.461985113, 
    1.413213649, 1.359761529, 1.311507559, 1.263834239}
	}
    //---------------------------------------------
    // Design Mode
    //---------------------------------------------
    //1,2 Turbine cooling Bleeds:
	Independent ind_TCLA_NC_fracW { varName = "B030.TCLA_NC.fracW"; description = "Bleed flow"; }
	Independent ind_TCLA_CH_fracW { varName = "B030.TCLA_CH.fracW"; description = "Bleed flow"; }
        // Corresponding Dependents are in CoolIt of TrbH

    //3 PCEC sizing:
	Independent ind_Acat{varName = "PCEC.Af"; description = "Catalyst Frontal Area";}
	Dependent dep_deNOx{eq_lhs = "PCEC.deNOx"; eq_rhs = "deNOx_target";}

    // 4 Fuel and Tt4
	Independent DESIGN_FUELFLOW { varName = "Eng.FusEng.Wfuel";	}
	Dependent DESIGN_TARGET_Tt41 { eq_lhs = "Eng.TrbH.F041.Tt"; eq_rhs = "Tt41";	}
	Dependent DESIGN_TARGET_NcFan { eq_lhs = "Eng.CmpF.NcPct"; eq_rhs = "100.0";	}

    // 5 Airflow Thrust
	Independent DESIGN_AIRFLOW { varName = "Eng.FsEng.W_in"; }
    Dependent TARGET_THRUST { eq_lhs = "Perf.Fn_total_N"; eq_rhs = "Fn_target"; }

    // 6 Match electric powers
    Independent ind_Motor_ShP{ varName = "PodProp.Motor.ShP";  }
    Dependent dep_Motor_Pelec{ eq_lhs = "PodProp.Motor.Pelec*n_poddedprops"; eq_rhs = "Gen.Pelec*Gen.nparallel*0.996*0.98"; }

    // 7 Match FnSplit
    Independent ind_FnSplit{ varName = "Gen.ShP"; }
    Dependent dep_FnSplit{ eq_lhs = "Perf.FnSplit"; eq_rhs = "FnSplitTarget"; }
	Dependent con_FnSplit{eq_lhs = "CmpF.NcPct"; eq_rhs = "110.0";}
	Dependent con_PodPropFanNc{eq_lhs = "PodProp.Fan.NcPct"; eq_rhs = "110.0";}
	Dependent con_CoreNozPt{eq_lhs = "NozPri.Fl_I.Pt"; eq_rhs = "Amb.Ps * 1.05";}
	dep_FnSplit.addConstraint("con_FnSplit", "MAX");
	dep_FnSplit.addConstraint("con_PodPropFanNc", "MAX");
	// dep_FnSplit.addConstraint("con_CoreNozPt", "MIN");

    // 8 BPR to target fansize
    Independent ind_BPR{varName = "Splt.BPRdes";}
    // Dependent dep_Fandia{eq_lhs = "CmpH.Fl_O.Wc"; eq_rhs = "8.0";}
    // Dependent dep_Fandia{eq_lhs = "CmpF.dia"; eq_rhs = "90.0";}
    Dependent dep_Fandia{eq_lhs = "NozPri.Fl_I.Pt"; eq_rhs = "Amb.Ps *1.2";}
    // Dependent dep_Fandia{eq_lhs = "NozPri.Fl_O.MN"; eq_rhs = "0.2";}
    // Dependent dep_Fandia{eq_lhs = "PCEC.Fl_O.MN"; eq_rhs = "0.2";}
    // Dependent dep_Fandia{eq_lhs = "Perf.FfracCore"; eq_rhs = "0.05";}
    // Dependent dep_Fandia{eq_lhs = "GB.gearRatio"; eq_rhs = "4.0";}

	// 9 Fan shaft speed to target fan tip speed
	Independent ind_FanSpeed{varName = "ShF.Nmech";}
	Dependent dep_FanSpeed{eq_lhs = "CmpF.Mtip"; eq_rhs = "1.3";}

	// 10 Fan nozzle schedule 
	Independent ind_NozArea {varName = "Eng.NozSec.AthCold";}
	Dependent dep_CmpFNc{ eq_lhs = "Eng.CmpF.S_map.RlineMap"; eq_rhs="TB_NozArea(Eng.CmpF.S_map.NcMap)";}

	// Ensure podded propulsors are operating at same alt and Mn
    void preexecute(){
        PodProp.Amb.MN_in = Eng.Amb.MN_in;
        PodProp.Amb.alt_in = Eng.Amb.alt_in;
    }

	
	void variableChanged(string name, any oldval)
	{
		if (name == "switchDes")
		{
			if (switchDes == "DESIGN")
			{
				// Bleed Flows sizing ON
				ind_TCLA_NC_fracW.autoSetup = TRUE;
				ind_TCLA_CH_fracW.autoSetup = TRUE;;

				// PCEC sizing ON
				ind_Acat.autoSetup    = TRUE;
				dep_deNOx.autoSetup   = TRUE;

				DESIGN_FUELFLOW.autoSetup = TRUE;
				DESIGN_TARGET_Tt41.autoSetup = TRUE;
				DESIGN_TARGET_NcFan.autoSetup = FALSE;

				DESIGN_AIRFLOW.autoSetup  = TRUE;
                TARGET_THRUST.autoSetup   = TRUE;

                ind_Motor_ShP.autoSetup = TRUE;
                dep_Motor_Pelec.autoSetup = TRUE;

                ind_FnSplit.autoSetup = TRUE;
                dep_FnSplit.autoSetup = TRUE;
				dep_FnSplit.useConstraints = FALSE;

                ind_BPR.autoSetup    = TRUE;
                dep_Fandia.autoSetup = TRUE;

				ind_FanSpeed.autoSetup = TRUE;
				dep_FanSpeed.autoSetup = TRUE;

				ind_NozArea.autoSetup = FALSE;
				dep_CmpFNc.autoSetup  = FALSE;

			}
			else if (switchDes == "OFFDESIGN")
			{
				// Fixed Bleed flows
				ind_TCLA_NC_fracW.autoSetup = FALSE;
				ind_TCLA_CH_fracW.autoSetup = FALSE;
				
				//PCEC sizing OFF
				ind_Acat.autoSetup    = FALSE;
				dep_deNOx.autoSetup   = FALSE;	

				// Offdesign Independents
				DESIGN_AIRFLOW.autoSetup  = FALSE; // W_in doesn't change but W changes based on operation
                TARGET_THRUST.autoSetup   = FALSE;

				DESIGN_FUELFLOW.autoSetup = TRUE;
				DESIGN_TARGET_Tt41.autoSetup = TRUE;
				DESIGN_TARGET_NcFan.autoSetup = FALSE;


                ind_Motor_ShP.autoSetup = TRUE;
                dep_Motor_Pelec.autoSetup = TRUE;

                
                ind_FnSplit.autoSetup = TRUE;
                dep_FnSplit.autoSetup = TRUE;
				dep_FnSplit.useConstraints = FALSE;

                ind_BPR.autoSetup    = FALSE;
                dep_Fandia.autoSetup = FALSE;

				ind_FanSpeed.autoSetup = FALSE;
				dep_FanSpeed.autoSetup = FALSE;

				ind_NozArea.autoSetup = FALSE;
				dep_CmpFNc.autoSetup  = FALSE;

			}
		}
	}
	void OFFDES2(){

		setOption("switchDes", "OFFDESIGN");
      // Same setup as offdes but just swith out target Tt41 for target Fn
        TARGET_THRUST.autoSetup   = TRUE;
        DESIGN_TARGET_Tt41.autoSetup = FALSE;	


	}
}


