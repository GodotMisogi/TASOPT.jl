//------------------------------------------------------------------------
//                                                                       |
//   File Name:     Turboshaft.mdl                                       |
//   Date(s):       January 1, 2021                                      |
//   Author:        Prakash Prashanth                                    |
//                                                                       |
//   Description:   Turboshaft engine architecture                       |
//                                                                       |
//------------------------------------------------------------------------

//------------------------------------------------------------------------
//                            Model Definition 
//------------------------------------------------------------------------

Assembly Assembly Eng
{
	// 1. Assembly level elements for solution control, interfacing, and power setting
	Option switchDes {
		description = "Determines if the engine assembly is in design or off-design mode";
		IOstatus = "input";
		rewritableValues = FALSE;
		trigger = TRUE;
		allowedValues = {"DESIGN","OFFDESIGN"};
	}

	// 2. Free Stream definition - establish ambient conditions
    // ------------------------------
    // Ambient Amb
    // ------------------------------
    Element Ambient Amb
    {
        setOption( "switchMode", "ALDTMN" );
        setOption( "switchDay" , "STD" );
        alt_in    = 0.0 "ft";
        dTs_in    = 0.0 "dF";
        MN_in     = 0.0;
    }
    // ------------------------------
    // InletStart FsEng
    // ------------------------------
    Element InletStart FsEng
    {
        AmbientName = "Amb";
        setOption("switchInd" , "W");
		//Precalculate how much airflow needs to go through for a given area, 
		//MN and flow conditions.	
        W_in = 80.0;
		real theta_0;
		void postexecute(){
			theta_0 = Fl_O.Tt/518.67;
		}
    }
    // 3. Front Face definition - inlet drag losses and flow splitting
	// ------------------------------
    // Inlet InEng
    // ------------------------------
    Element Inlet InEng
    {
		PqP_in = 0.998;		
		Fl_O.MNdes = 0.5;
	}
	// ------------------------------
    // Inlet Drag CdragIn
    // ------------------------------
	// Element CustomerDrag CdragIn{description = "Placeholder Inlet Spillage Drag";}
	// ------------------------------
	// Compressor CmpF
	// ------------------------------
	Element Compressor CmpL {
		#include "CompressorRlineMap_NEPP_LPC.map"
		Fl_O.MNdes = 0.4; 
		S_map.alphaMap = 0.00;
		S_map.RlineMapDes = 2.0;
		S_map.NcMapDes = 1.0;
		PRdes = 3.5;  
		effDes = 0.89;
	}
	// ------------------------------
    // Duct HPC Transition
    // ------------------------------
    Element Duct D025
    {
        switchDP = "INPUT";

        void preexecute()
        {
            dPqP_in = 0.2 * Fl_I.MN * Fl_I.MN;
        }
		Fl_O.MNdes = 0.31;

    }
	
	//------------------------------
	// High Pressure Compressor CmpH
	//------------------------------
	Element Compressor CmpH {
		#include <CompressorRlineMap_NEPP_HPC.map> 
		Fl_O.MNdes = 0.3; 
		S_map.alphaMap = 0.00;
		S_map.RlineMapDes = 2.0;
		S_map.NcMapDes = 1.0;
		PRdes = 10.0;  
		effDes = 0.90;
	}

	//------------------------------
	// Bleed B030
	//------------------------------
	Element Bleed B030 {
		Fl_O.MNdes = 0.4; 

		// Turbine Cooling and Leakage Air (TCLA) stream 1 (connects to turbine inlet)
		BleedOutPort TCLA_NC {	              
			fracW = 0.100;
		}
		// Turbine Cooling and Leakage Air (TCLA) stream 2 (connects to turbine exit)
		BleedOutPort TCLA_CH {	              
			fracW = 0.00;
		} 
	}
	//------------------------------
	// FuelStart FusEng
	//------------------------------
	Element FuelStart FusEng {
		Wfuel = 2.35;
		LHV = 18400.; 
	}

	//------------------------------
	// Burner BrnPri
	//------------------------------
	Element Burner BrnPri {
		effBase = 0.99;
		dPqP_dmd = 0.07;
		Fl_O.MNdes = 0.10;

		setOption("switchBurn", "WFUEL");
		FAR = .024225;

		real EINOx = 0;

		void postexecute(){
			// Calcualte EINOx based on P3T3 method calibarated to CFM56-5B
			real T3 = Fl_I.Tt*100/180;
			real P3 = Fl_I.Pt*getUnitsFactor(Fl_I.Pt.units, "kPa");

			real a,b,c,d;
			a = 6.25528852e-08;
			b = -1.17064467e-04;
			c = 7.36953400e-02;
			d = -1.50392850e+01;
			EINOx = P3**0.4*(a*T3**3 + b*T3**2 + c*T3 +d)*FusEng.LHV/18400; //this applies a scaling if different fuels are used

		}
	}

	//------------------------------
	// High Pressure Turbine TrbH
	//------------------------------
	Element Turbine TrbH {
		
	#include <TurbinePRmap_NEPP_HPT.map>
	FlowStation F041;
	Fl_O.MNdes = 0.30;
	effDes = 0.89;
	PRbase = 3.603;

		// Turbine Cooling and Leakage Air (TCLA) stream 1 (introduced at turbine inlet)
		InterStageBleedInPort TCLA_NC { 
			Pfract  = 1.0;
			diaPump = 0.0;
		} 

		// Turbine Cooling and Leakage Air (TCLA) stream 2 (introduced at turbine exit)
		InterStageBleedInPort TCLA_CH { 
			Pfract  = 0.0;
			diaPump = 0.0;
		}

		// Subelement to calculate the amount of cooling flow required to cool the turbine	
		Subelement CoolIt Cool {
			nStages = 1;
			bldNameFirstRow = "TCLA_NC";
			bldName = "TCLA_CH";
			TvaneDes[0] = 2100;
			TbladeDes[0] = 1930;
			s_BldFirstRow = 1.5;  
			s_Bld = 1.5;  
		}   
		void postexecute() { 
			F041.copyFlow("Fl_I");
			F041.add("TCLA_NC");
			if ( switchDes == "DESIGN" ) {
				Cool.run();
			} 	 
		} 
	}

	// ------------------------------

	// ------------------------------
	// Duct D050
	// ------------------------------
	Element  Duct D050{
		Fl_O.MNdes = 0.4;
	}
	//------------------------------
	// Free Power Turbine TrbP
	//------------------------------
	Element Turbine TrbP {
		#include <TurbinePRmap_NEPP_FPT.map>
		FlowStation F049;
		effDes = 0.91;
		PRbase = 4.2;
		Fl_O.MNdes = 0.5;
	}

	//------------------------------
	// Duct D060
	//------------------------------
	Element Duct D060 {
		dPqP_dmd = 0.025;
		Fl_O.MNdes = 0.3; 
	}
	//------------------------------
	// Post-combustion emissions control SCR
	//------------------------------
	Element SCR PCEC{
		Af = 19.0;
		l  = 0.0125;
		cpsi = 900;
		w    = 2.0 ;
		Fl_O.MNdes = 0.4;
	}

	//------------------------------
	// Nozzle NozPri
	//------------------------------
	Element Nozzle NozPri {
		switchType = "CONIC";
		switchCoef = "CV";
		Cv_in = 0.99;
		CdTh_in = 0.96;
		PsExhName = "Amb.Ps"; 
	}

	//------------------------------
	// End of Nozzle
	//------------------------------
	Element FlowEnd NozEnd {
	}
	
	// 4. Shaft definition - HP and FPT shafts
	//------------------------------
	// HP Shaft ShH
	//------------------------------
	Element Shaft ShH {
		ShaftInputPort CmpL, CmpH, TrbH;
		Nmech = 37500.;
	}
	
	//------------------------------
	// Free Power Turbine Shaft ShP
	//------------------------------
	Element Shaft ShP {
		ShaftInputPort TrbP;
		HPX = 29.e6;
		Nmech = 30000.;
	}

	// 8. Performance calculations
	//------------------------------
	// EngPerf Perf
	//------------------------------
	Element EngPerf Perf {

		// Ideal thermal efficiency
		//-------------------------
		// The Ideal thermal efficiency of this cycle is defined as the IDEAL AMOUNT
		// of work that can be extracted from the flow AFTER THE WORK for the compressors 
		// has been satisfied:

		// Ideal_power_available = (Total enthalpy after satisifying compressor requirements) 
		// -  (Static enthaly after expanding gas to ambient pressure in an isentropic process)

		// \eta_{Thermal, ideal}  = Ideal_power_available/(fuel power)

		// Additional outputs
		real IdealThermalEff{
			value = 0.; IOstatus = OUTPUT; units = "none";
			description = "Ideal thermal efficiency";
		}
		real N1 {
			value = 0.; IOstatus = OUTPUT; units = "rpm";
			description = "High pressure shaft speed";
		}
		real N2 {
			value = 0.; IOstatus = OUTPUT; units = "rpm";
			description = "Free power turbine shaft speed";
		} 
		real ITTK {
			value = 0.; IOstatus = OUTPUT; units = "K";
			description = "Free power turbine inlet temperature in degrees Celsius";
		}
		real Torque {
			value = 0.; IOstatus = OUTPUT; units = "ft*lbm";
			description = "Free power turbine actual shaft torque";
		}
		real SHP {
			value = 0.; IOstatus = OUTPUT; units = "hp";
			description = "Free power turbine actual shaft power";
		}
		real BSFC {
			value = 0.; IOstatus = OUTPUT; units = "lbm/(hr*hp)";
			description = "Brake specific fuel consumption";	
		}
		FlowStation PT_inlet;
		// Additional calculations
		void postexecute() { 
			
			real fuelLHV  = FusEng.LHV*getUnitsFactor(FusEng.LHV.units, "J/kg");
			real fuelflow = BrnPri.Wfuel*getUnitsFactor(BrnPri.Wfuel.units,"kg/sec");

			PT_inlet.copyFlow("D050.Fl_O");
			PT_inlet.W = D050.Fl_O.W;
			PT_inlet.setStaticPs(Amb.Ps);
			
			IdealThermalEff = PT_inlet.W*getUnitsFactor(PT_inlet.W.units,"kg/sec") * 
			(PT_inlet.ht - PT_inlet.hs)*getUnitsFactor(PT_inlet.hs.units, "J/kg") /(fuelLHV*fuelflow);

			// Machine speeds
			N1 = ShH.Nmech;
			N2 = ShP.Nmech; 
			// Torque
			Torque = ShP.trqIn;
			// Shaft Power
			SHP = ShP.pwrIn;  
			// Specific fuel consumption
			BSFC = (BrnPri.Wfuel / SHP) * 3600;
			
			// Temperature
			ITTK = D050.Fl_O.Tt * 100/180;
		}
	}
	//------------------------------------------------------------------------
	// Component Links
	//------------------------------------------------------------------------

	// Core stream
	linkPorts( "FsEng.Fl_O"     , "InEng.Fl_I"    , "F010"  ) ;
	linkPorts( "InEng.Fl_O"     , "CmpL.Fl_I"     , "F020"  ) ;
	linkPorts( "CmpL.Fl_O"      , "D025.Fl_I"     , "F025"  ) ;
	linkPorts( "D025.Fl_O"      , "CmpH.Fl_I"     , "F029"  ) ;
	linkPorts( "CmpH.Fl_O"      , "B030.Fl_I"     , "F030"  ) ;
	linkPorts( "B030.Fl_O"      , "BrnPri.Fl_I"   , "F031"  ) ;
	linkPorts( "FusEng.Fu_O"    , "BrnPri.Fu_I"   , "F036"  ) ;
	linkPorts( "BrnPri.Fl_O"    , "TrbH.Fl_I"     , "F040"  ) ;
	linkPorts( "TrbH.Fl_O"      , "D050.Fl_I"     , "F045"  ) ;
	linkPorts( "D050.Fl_O"      , "TrbP.Fl_I"     , "F050"  ) ;
	linkPorts( "TrbP.Fl_O"      , "D060.Fl_I"     , "F060"  ) ;
	linkPorts( "D060.Fl_O"      , "PCEC.Fl_I"     , "F0PCEC"  ) ;
	linkPorts( "PCEC.Fl_O"      , "NozPri.Fl_I"   , "F070"  ) ;
	linkPorts( "NozPri.Fl_O"    , "NozEnd.Fl_I"   , "F090"  ) ;

	// Bleed Connections
	linkPorts( "B030.TCLA_NC" , "TrbH.TCLA_NC"  ,  "TrbH_NC" );
	linkPorts( "B030.TCLA_CH" , "TrbH.TCLA_CH"  ,  "TrbH_CH" );

	// Shaft Connections
	linkPorts( "CmpL.Sh_O"   , "ShH.CmpL"  ,  "CmpL_Work"   ) ;
	linkPorts( "CmpH.Sh_O"   , "ShH.CmpH"  ,  "CmpH_Work"   ) ;
	linkPorts( "TrbH.Sh_O"   , "ShH.TrbH"  ,  "TrbH_Work"   ) ;
	linkPorts( "TrbP.Sh_O"   , "ShP.TrbP"  ,  "TrbP_Work"   ) ;

	// 10. Solver settings

	//------------------------------------------------------------------------
	// Model Dependents & Independents
	//------------------------------------------------------------------------
	//Turbine cooling Bleeds
	Independent ind_TCLA_NC_fracW { varName = "B030.TCLA_NC.fracW"; description = "Bleed flow"; }
	Independent ind_TCLA_CH_fracW { varName = "B030.TCLA_CH.fracW"; description = "Bleed flow"; }

	Dependent dep_noz_Ps_exit{ eq_lhs = "NozPri.Fl_O.MN"; eq_rhs = "0.2";}
	// Dependent dep_noz_Ps_exit{ eq_lhs = "ShP.trqNet"; eq_rhs = "0.0";}

	Independent ind_Acat{varName = "PCEC.Af"; description = "Catalyst Frontal Area";}
	Dependent dep_deNOx{eq_lhs = "PCEC.deNOx"; eq_rhs = "deNOx_target";}

	Dependent dep_N2{eq_lhs = "Perf.N2"; eq_rhs = "N2_dmd";}

	Independent DESIGN_FUELFLOW {
		varName = "Eng.FusEng.Wfuel";
	}

	Independent DESIGN_AIRFLOW {
		varName = "Eng.FsEng.W_in"; 
	}
	// --
	Dependent DESIGN_TARGET_Tt41 {
		eq_lhs = "Eng.TrbH.F041.Tt"; eq_rhs = "Tt41";
	}

	Dependent TARGET_SHP {
		eq_lhs = "Eng.Perf.SHP"; //Note this needs to be a negative value
		eq_rhs = "SHP_dmd";

	}

	Independent ind_GenShP { varName = "Eng.ShP.HPX";}
	
	void variableChanged(string name, any oldval)
	{
		if (name == "switchDes")
		{
			if (switchDes == "DESIGN")
			{
				// Bleed Flows sizing ON
				ind_TCLA_NC_fracW.autoSetup = TRUE;
				ind_TCLA_CH_fracW.autoSetup = TRUE;
				// solver.addIndependent("Eng.ind_TCLA_NC_fracW");

				// PCEC sizing ON
				ind_Acat.autoSetup    = TRUE;
				dep_deNOx.autoSetup   = TRUE;

				// Design Independents
				DESIGN_AIRFLOW.autoSetup  = TRUE;
				DESIGN_FUELFLOW.autoSetup = TRUE;

				// Design Dependents
				DESIGN_TARGET_Tt41.autoSetup = TRUE;
				dep_noz_Ps_exit.autoSetup    = TRUE;

				dep_N2.autoSetup = FALSE;

				ind_GenShP.autoSetup = FALSE;
				TARGET_SHP.autoSetup = FALSE;
			}
			else if (switchDes == "OFFDESIGN")
			{
				// Fixed Bleed flows
				ind_TCLA_NC_fracW.autoSetup = FALSE;
				ind_TCLA_CH_fracW.autoSetup = FALSE;
				
				//PCEC sizing OFF
				ind_Acat.autoSetup    = FALSE;
				dep_deNOx.autoSetup   = FALSE;	

				// Offdesign Independents
				DESIGN_AIRFLOW.autoSetup  = FALSE; // W_in doesn't change but W changes based on operation
				DESIGN_FUELFLOW.autoSetup = TRUE;

				// Offdesign Dependents
				DESIGN_TARGET_Tt41.autoSetup = TRUE;	
				dep_noz_Ps_exit.autoSetup    = FALSE;

				dep_N2.autoSetup = TRUE;

				ind_GenShP.autoSetup = TRUE;
				TARGET_SHP.autoSetup = FALSE;

			}
		}
	}
	void OFFDES2(){

		setOption("switchDes", "OFFDESIGN");
		// Bleed Flows sizing OFF
		ind_TCLA_NC_fracW.autoSetup = FALSE;
		ind_TCLA_CH_fracW.autoSetup = FALSE;
		// solver.addIndependent("Eng.ind_TCLA_NC_fracW");

		// PCEC sizing OFF
		ind_Acat.autoSetup    = FALSE;
		dep_deNOx.autoSetup   = FALSE;

		// Design Independents
		DESIGN_AIRFLOW.autoSetup  = FALSE;
		DESIGN_FUELFLOW.autoSetup = TRUE;

		// Design Dependents
		DESIGN_TARGET_Tt41.autoSetup = FALSE;
		dep_noz_Ps_exit.autoSetup    = FALSE;

		dep_N2.autoSetup = TRUE;

		ind_GenShP.autoSetup = FALSE;
		TARGET_SHP.autoSetup = FALSE;

	}
}


