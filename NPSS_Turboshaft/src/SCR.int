//------------------------------------------------------------------------
//                                                                       |
//   File Name:     SCR.int                                              |
//   Date(s):       August 29, 2020; October 8, 2020                     |
//   Author:        Prakash Prashanth                                    |
//                                                                       |
//   Description:   Selective catalytic reduction                        |
//                  Catalyst module calculates the NOx reduction,        |
//                  and associated pressured drop, and mass requi        |
//                                                                       |
//                  For further information contact prash@mit.edu        |
//                                                                       |
//                                                                       |
//                                                                       |
//                                                                       |
//------------------------------------------------------------------------

#ifndef __SCR__
#define __SCR__

#include <InterpIncludes.ncp>

class SCR extends Element {

//------------------------------------------------------------
//     ******* DOCUMENTATION *******
//------------------------------------------------------------

  title = "";

  description = isA() + " calculates the performance of a SCR catalyst.";

  usageNotes = isA() +
"
 
- This element calculates the pressure loss in a catalyst as well as the
NOx removal (deNOx) based on the lumped parameter model of Tronconi et al
";

  background = "";

//------------------------------------------------------------
//     ******* SETUP VARIABLES ********
//------------------------------------------------------------

  real rho_corderite{
	  value = 2600.0; IOstatus = OUTPUT; units = "kg/m3";
	  description = "Density of corderite substrate";
  }
  real catalyst_loading{
	  value = 300.0; IOstatus = OUTPUT; units = "kg/m3";
	  description = "Average catalyst loading";
  }
  real porosity{
	  value = 0.56; IOstatus = OUTPUT; units = NONE;
	  description = "Substrate porosity";
  }
  real tortuosity{
	  value = 1.7; IOstatus = OUTPUT; units = NONE;
	  description = "Tortosity factor - see Beekman 
	  J. W. Beeckman,Industrial and Engineering Chemistry Re-search, 1991,30, 428â€“430.";
  }
   real Da{
	  value = 10000; IOstatus = OUTPUT; units = NONE;
	  description = "Dahmkoler number";
  }
  
	  
  real l {
	value = 0.0; IOstatus = OUTPUT; units = M;
	description = "Reacting channel length";
  }
  real Af {
	  value = 0.0; IOstatus = OUTPUT; units = M2;
	  description = "Frontal Area";
  }
  real cpsi {
	  value = 0.0; IOstatus = OUTPUT; units = NONE;
	  description = "Cells per square inch";
  }
  real w {
	  value = 0.0; IOstatus =OUTPUT; units = MIL;
	  description = "Cell wall thickness (mil)";
  }
  
  
  
  real dPqP {
    value = 0;  IOstatus = OUTPUT;  units = NONE;
    description = "Normalized pressure drop (delta P/P) due to catalyst";
  }
  
  real m_cat {
    value = 0;  IOstatus = OUTPUT;  units = KG;
    description = "Catalyst Mass";
  }
  
  real deNOx {
    value = 0;  IOstatus = OUTPUT;  units = NONE;
    description = "Normalized deNOx (delta NOx/NOx) due to catalyst";
  }
	
  real GHSV {
    value = 0;  IOstatus = OUTPUT;  units = "1/hr";
    description = "Gas Hourly space velocity (1/h)";
  }
  real t_res {
    value = 0;  IOstatus = OUTPUT;  units = "sec";
    description = "Effective residence time";
  }
  real d_hy{
	  value = 0.; IOstatus = OUTPUT; units = "m";
	  description = "Hydraulic diameter";
  }
real V_cat {
	value = 0; IOstatus = OUTPUT; units = "m3";
	description = "Catalyst bulk volume";
	}
real delP {
	value = 0; IOstatus = OUTPUT; units = "Pa";
	description ="Catalyst pressure loss";
}
real u_c{
	value = 0; IOstatus = OUTPUT; units = "m/sec";
	description = "Cat channel velocity";
}

real Deff{
	value = 0; IOstatus = OUTPUT; units = "m2/sec";
	description = "Effective diffusivity in the channels";
}
  
  

//------------------------------------------------------------
//   ******* OPTION VARIABLE SETUP *******
//------------------------------------------------------------
// first value in allowedValue list is the defaule
  Option switchDes {
    allowedValues = { DESIGN, OFFDESIGN };
    description = "Design mode switch indicator";
    trigger = TRUE;
    rewritableValues = FALSE;  // Enables converter optimization.
  }
  Option switchMode {
    allowedValues = { "ON", "OFF" }
    description = "Determines if the Catalyst is included or not - allows for baseline calcualtion";
    IOstatus = INPUT;
    rewritableValues = FALSE;  // Enables converter optimization.
  }
   
//------------------------------------------------------------
// ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ********
//------------------------------------------------------------

// FLUID PORTS

  FluidInputPort Fl_I {
    description = "Inlet flow station";
  }
  
  FluidOutputPort Fl_O {
    description = "Outlet flow station";
  }
  
// FUEL PORTS

// BLEED PORTS

// THERMAL PORTS

// MECHANICAL PORTS

// FLOW STATIONS

// SOCKETS

// TABLES
 Table deNOxTbl(real z_star, real Da){
	Da = 100. {
		z_star = {0,0.01010101,0.02020202,0.03030303,0.04040404,0.050505051,0.060606061,0.070707071,0.080808081,0.090909091,0.101010101,
		0.111111111,0.121212121,0.131313131,0.141414141,0.151515152,0.161616162,0.171717172,0.181818182,0.191919192,0.202020202,0.212121212,
		0.222222222,0.232323232,0.242424242,0.252525253,0.262626263,0.272727273,0.282828283,0.292929293,0.303030303,0.313131313,0.323232323,
		0.333333333,0.343434343,0.353535354,0.363636364,0.373737374,0.383838384,0.393939394,0.404040404,0.414141414,0.424242424,0.434343434,
		0.444444444,0.454545455,0.464646465,0.474747475,0.484848485,0.494949495,0.505050505,0.515151515,0.525252525,0.535353535,0.545454545,
		0.555555556,0.565656566,0.575757576,0.585858586,0.595959596,0.606060606,0.616161616,0.626262626,0.636363636,0.646464646,0.656565657,
		0.666666667,0.676767677,0.686868687,0.696969697,0.707070707,0.717171717,0.727272727,0.737373737,0.747474747,0.757575758,0.767676768,
		0.777777778,0.787878788,0.797979798,0.808080808,0.818181818,0.828282828,0.838383838,0.848484848,0.858585859,0.868686869,0.878787879,
		0.888888889,0.898989899,0.909090909,0.919191919,0.929292929,0.939393939,0.949494949,0.95959596,0.96969697,0.97979798,0.98989899,1}
		
		deNOx = {0,0.241420442,0.350184819,0.431817846,0.498922606,0.556266919,0.606204986,0.650119708,0.688939536,0.723353644,0.753910549,
		0.781066893,0.805213435,0.826690056,0.845795214,0.862792445,0.877915196,0.891370642,0.903342845,0.913995433,0.923473925,0.931907761,
		0.939412094,0.946089376,0.952030761,0.957317354,0.962021321,0.966206872,0.969931142,0.973244968,0.976193584,0.978817239,0.981151746,
		0.983228972,0.985077272,0.986721874,0.988185228,0.989487309,0.990645891,0.991676788,0.992594071,0.993410263,0.994136504,0.994782707,
		0.995357694,0.995869313,0.996324547,0.996729611,0.997090034,0.997410735,0.997696092,0.997950001,0.998175927,0.998376954,0.998555827,
		0.998714986,0.998856605,0.998982616,0.99909474,0.999194507,0.999283278,0.999362267,0.99943255,0.999495087,0.999550733,0.999600246,
		0.999644302,0.999683502,0.999718383,0.999749419,0.999777035,0.999801608,0.999823472,0.999842927,0.999860238,0.999875641,0.999889346,
		0.999901541,0.999912392,0.999922047,0.999930638,0.999938282,0.999945084,0.999951136,0.999956521,0.999961313,0.999965577,0.99996937,
		0.999972746,0.99997575,0.999978422,0.9999808,0.999982916,0.999984799,0.999986474,0.999987965,0.999989291,0.999990471,0.999991522,0.999992456}
	}
	
	Da = 1000. {
	
		z_star = {0,0.01010101,0.02020202,0.03030303,0.04040404,0.050505051,0.060606061,0.070707071,0.080808081,0.090909091,0.101010101,
		0.111111111,0.121212121,0.131313131,0.141414141,0.151515152,0.161616162,0.171717172,0.181818182,0.191919192,0.202020202,0.212121212,
		0.222222222,0.232323232,0.242424242,0.252525253,0.262626263,0.272727273,0.282828283,0.292929293,0.303030303,0.313131313,0.323232323,
		0.333333333,0.343434343,0.353535354,0.363636364,0.373737374,0.383838384,0.393939394,0.404040404,0.414141414,0.424242424,0.434343434,
		0.444444444,0.454545455,0.464646465,0.474747475,0.484848485,0.494949495,0.505050505,0.515151515,0.525252525,0.535353535,0.545454545,
		0.555555556,0.565656566,0.575757576,0.585858586,0.595959596,0.606060606,0.616161616,0.626262626,0.636363636,0.646464646,0.656565657,
		0.666666667,0.676767677,0.686868687,0.696969697,0.707070707,0.717171717,0.727272727,0.737373737,0.747474747,0.757575758,0.767676768,
		0.777777778,0.787878788,0.797979798,0.808080808,0.818181818,0.828282828,0.838383838,0.848484848,0.858585859,0.868686869,0.878787879,
		0.888888889,0.898989899,0.909090909,0.919191919,0.929292929,0.939393939,0.949494949,0.95959596,0.96969697,0.97979798,0.98989899,1}
		
		deNOx = {0,0.264115131,0.373112774,0.454130726,0.520340006,0.576667419,0.625533109,0.668354862,0.706082793,0.739420876,0.768928221,
		0.795069156,0.818239946,0.838784276,0.85700305,0.873161158,0.88749253,0.900204129,0.911479257,0.921480365,0.930351472,0.938220289,
		0.945200075,0.951391284,0.956883014,0.961754296,0.966075226,0.969907985,0.973307725,0.976323369,0.978998311,0.981371043,0.983475708,
		0.985342591,0.986998558,0.988467437,0.989770364,0.990926089,0.991951243,0.992860576,0.993667175,0.994382646,0.995017284,0.995580222,
		0.99607956,0.996522484,0.996915367,0.997263863,0.997572987,0.997847186,0.998090407,0.99830615,0.998497518,0.998667265,0.998817835,
		0.998951394,0.999069863,0.999174949,0.999268161,0.999350843,0.999424184,0.999489238,0.999546943,0.999598129,0.999643531,0.999683805,
		0.999719528,0.999751215,0.999779322,0.999804254,0.999826369,0.999845986,0.999863386,0.99987882,0.999892511,0.999904655,0.999915427,
		0.999924982,0.999933457,0.999940975,0.999947644,0.999953559,0.999958806,0.99996346,0.999967588,0.99997125,0.999974498,0.999977379,
		0.999979935,0.999982202,0.999984212,0.999985996,0.999987578,0.999988982,0.999990226,0.999991331,0.99999231,0.999993179,0.99999395,0.999994633}
	}	
	
	Da = 10000. {
	
		z_star = {0,0.01010101,0.02020202,0.03030303,0.04040404,0.050505051,0.060606061,0.070707071,0.080808081,0.090909091,0.101010101,
		0.111111111,0.121212121,0.131313131,0.141414141,0.151515152,0.161616162,0.171717172,0.181818182,0.191919192,0.202020202,0.212121212,
		0.222222222,0.232323232,0.242424242,0.252525253,0.262626263,0.272727273,0.282828283,0.292929293,0.303030303,0.313131313,0.323232323,
		0.333333333,0.343434343,0.353535354,0.363636364,0.373737374,0.383838384,0.393939394,0.404040404,0.414141414,0.424242424,0.434343434,
		0.444444444,0.454545455,0.464646465,0.474747475,0.484848485,0.494949495,0.505050505,0.515151515,0.525252525,0.535353535,0.545454545,
		0.555555556,0.565656566,0.575757576,0.585858586,0.595959596,0.606060606,0.616161616,0.626262626,0.636363636,0.646464646,0.656565657,
		0.666666667,0.676767677,0.686868687,0.696969697,0.707070707,0.717171717,0.727272727,0.737373737,0.747474747,0.757575758,0.767676768,
		0.777777778,0.787878788,0.797979798,0.808080808,0.818181818,0.828282828,0.838383838,0.848484848,0.858585859,0.868686869,0.878787879,
		0.888888889,0.898989899,0.909090909,0.919191919,0.929292929,0.939393939,0.949494949,0.95959596,0.96969697,0.97979798,0.98989899,1}
		
		deNOx = {0,0.268034185,0.376810888,0.457583229,0.523551765,0.579648569,0.628295067,0.670909396,0.708441714,0.741595897,0.770930853,
		0.796910621,0.819931112,0.840335601,0.858424541,0.874462345,0.888682444,0.901291295,0.912471697,0.922385599,0.93117653,0.938971727,
		0.945883991,0.952013339,0.957454378,0.962267965,0.966541604,0.970331198,0.973691571,0.976671339,0.979313609,0.981656608,0.983734233,
		0.985576539,0.987210181,0.988658792,0.98994333,0.991082377,0.992092412,0.992988048,0.993782241,0.994486482,0.995110959,0.995664705,
		0.996155733,0.996591146,0.996977242,0.997319608,0.997623197,0.9978924,0.998131113,0.998342789,0.998530489,0.99869693,0.998844519,
		0.998975392,0.999091442,0.999194348,0.999285599,0.999366514,0.999438264,0.999501888,0.999558305,0.999608333,0.999652694,0.999692031,
		0.999726913,0.999757843,0.999785271,0.999809591,0.999831158,0.999850281,0.999867239,0.999882276,0.999895609,0.999907433,0.999917917,
		0.999927214,0.999935458,0.999942768,0.999949251,0.999954999,0.999960096,0.999964615,0.999968623,0.999972177,0.999975328,0.999978123,
		0.999980603,0.9999828,0.999984748,0.999986476,0.999988007,0.999989366,0.99999057,0.999991638,0.999992585,0.999993425,0.99999417,0.99999483}	
	}
}

//------------------------------------------------------------
// ******* INTERNAL SOLVER SETUP *******
//------------------------------------------------------------

//------------------------------------------------------------
//  ******  ADD SOLVER INDEPENDENTS & DEPENDENTS  ******
//------------------------------------------------------------

//------------------------------------------------------------
// ******* VARIABLE CHANGED METHODOLOGY *******
//------------------------------------------------------------
void variableChanged( string name, any oldVal ) {
 
    if ( name == "switchDes" ) {
      if ( switchDes == "DESIGN" ) {
		Af.IOstatus   = INPUT;
		l.IOstatus    = INPUT;
		cpsi.IOstatus = INPUT;
		w.IOstatus    = INPUT;
      }
	  else if (switchDes == "OFFDESIGN") {
		// Af.IOstatus   = INPUT;
		// l.IOstatus    = INPUT;
		// cpsi.IOstatus = INPUT;
		// w.IOstatus    = INPUT;

		// // OFA.IOstatus  = INPUT;
		// d_hy.IOstatus = INPUT;
		// V_cat.IOstatus= INPUT;
		  
	  }

	}
}
//------------------------------------------------------------
//   ******* PERFORM ENGINEERING CALCULATIONS *******
//------------------------------------------------------------

  
  real FrictionFactor(real Re, real d_hy){
	  real f;
	  if(Re <=2300){f = 14.23/Re;}
	  else {
		  real ep = 1e-6;
		  f=(1/(-2*log10((ep/d_hy)/3.7 + 5.74/Re**0.9)))**2;
		  cout<< "ATTN: FLOW IS TURBULENT IN CATALYST CHANNELS" << endl;
	  }
	  
	  return f;
	  
  }
  
  real NO_diffusivity(string port){
	  real D {units = "m2/sec";}
	  // NO diffusivity in Air:
	  //D(296K) = 176 Torr cm^2 s^-1 based on M.J.Tang, 2014 Atmos. Chem. Phy.
	
	  real P_kPa = port->Pt.value*getUnitsFactor(port->Pt.units,"kPa");
	  real T_K = port->Tt.value*100/180;
	  
	  D = 176 * 10**-4/(P_kPa*7.5) * (T_K/296)**1.75; //m2/sec
	  
	  return D;
  }


  void calculate() {	 

    //------------------------------------------------------------
    // pass the flow information through
    //------------------------------------------------------------
    Fl_O.copyFlow( "Fl_I" );	//if the SCR is off then this is all it does
								// essentially bypassing 
	
	if (switchMode == "ON")
	{	
		
		// if (switchDes=="DESIGN")
		// {
			// Calculate Catalyst parameters
			real w_m = w*getUnitsFactor("mil","m"); // convert from mil to m
			real N = cpsi/getUnitsFactor("in2","m2"); 
			real s = sqrt(1/N);
			real GSA = 4*(1-w_m/s)*N**0.5;
			real OFA = (1-w_m/s)**2;
			
			d_hy = 4*OFA/GSA; 
			
			V_cat = Af*l ; // Bulk volume of catalyst;
			m_cat = (2600 *(1 - porosity)*(1-OFA) + catalyst_loading)*V_cat;
		// }
		// -----------------------
		// Flow Parameters
		// -----------------------
		real Win {value = 0; units = "kg/sec"; }
		real Ptin {value = 0; units = "Pa"; }
		real rho_in {value = 0; units = "kg/m3"; }
		real mu_in { value = 0; units = "Pa*sec";}
		
		Win    = Fl_I.W *getUnitsFactor(Fl_I.W.units,"kg/sec");
		Ptin   = Fl_I.Pt *getUnitsFactor(Fl_I.Pt.units,"Pa");
		rho_in = Fl_I.rhot *getUnitsFactor(Fl_I.rhot.units,"kg/m3"); 
		mu_in  = Fl_I.mu *getUnitsFactor(Fl_I.mu.units,"Pa*sec"); 
		
		u_c = Win/rho_in/(Af * OFA);	// Flow velocity in the channels		
		real Re = (u_c * d_hy * rho_in)/mu_in; // Reynolds number	
		
		real f = FrictionFactor(Re,d_hy);
		// Calculate pressure loss paramters
		real Kin  = (-0.415*OFA + 1.08);
		real Kout = (1-OFA)**2;
		real Kf   =  4*f*(l/d_hy);
		
		real P_lossCoeff = Kf + Kin + Kout;
		
		// Calcualte pressure loss from loss params
		delP = P_lossCoeff * (0.5*rho_in*u_c**2); //Pa
		dPqP = delP/Ptin;
		
		GHSV = 3600*u_c*OFA*Af/V_cat;
		t_res = 3600/GHSV;
		
		Deff = porosity/tortuosity*NO_diffusivity("Fl_I");
		
		real zstar = l*Deff/(u_c*d_hy**2);

		deNOx = deNOxTbl(zstar,Da); // Calculate deNOx from look up table
		
		
		real PtOut =  Fl_I.Pt * (1. - dPqP);
		
		Fl_O.setTotal_hP( Fl_I.ht, PtOut );

		
			 
	  }
  }

}


#endif
