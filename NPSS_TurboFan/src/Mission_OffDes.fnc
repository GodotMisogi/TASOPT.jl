
//Mission derived using SUAVE, from the following website: https://suave.stanford.edu/tutorials/B737.html
	real Time [] = { 0.00000000e+00, 9.10516636e-02, 3.60227260e-01, 7.95762523e-01,
	 1.37862247e+00, 2.08333333e+00, 2.87909586e+00, 3.73113140e+00,
	 4.60220193e+00, 5.45423748e+00, 6.25000000e+00, 6.95471086e+00,
	 7.53757081e+00, 7.97310607e+00, 8.24228167e+00, 8.33333333e+00,
	 8.33333333e+00, 8.48508611e+00, 8.93371210e+00, 9.65960421e+00,
	 1.06310375e+01, 1.18055556e+01, 1.31318264e+01, 1.45518857e+01,
	 1.60036699e+01, 1.74237291e+01, 1.87500000e+01, 1.99245181e+01,
	 2.08959513e+01, 2.16218435e+01, 2.20704694e+01, 2.22222222e+01,
	 2.22222222e+01, 2.23841728e+01, 2.28629464e+01, 2.36376185e+01,
	 2.46743321e+01, 2.59277778e+01, 2.73431741e+01, 2.88586613e+01,
	 3.04080054e+01, 3.19234926e+01, 3.33388889e+01, 3.45923346e+01,
	 3.56290482e+01, 3.64037202e+01, 3.68824939e+01, 3.70444444e+01,
	 3.70444444e+01, 4.06890717e+01, 5.14636657e+01, 6.88973250e+01,
	 9.22281151e+01, 1.20436368e+02, 1.52289249e+02, 1.86394633e+02,
	 2.21261952e+02, 2.55367336e+02, 2.87220217e+02, 3.15428470e+02,
	 3.38759260e+02, 3.56192919e+02, 3.66967513e+02, 3.70612141e+02,
	 3.70612141e+02, 3.70720108e+02, 3.71039290e+02, 3.71555738e+02,
	 3.72246880e+02, 3.73082511e+02, 3.74026108e+02, 3.75036433e+02,
	 3.76069329e+02, 3.77079654e+02, 3.78023252e+02, 3.78858882e+02,
	 3.79550025e+02, 3.80066473e+02, 3.80385655e+02, 3.80493622e+02,
	 3.80493622e+02, 3.80566463e+02, 3.80781804e+02, 3.81130232e+02,
	 3.81596520e+02, 3.82160289e+02, 3.82796899e+02, 3.83478527e+02,
	 3.84175384e+02, 3.84857012e+02, 3.85493622e+02, 3.86057391e+02,
	 3.86523679e+02, 3.86872107e+02, 3.87087447e+02, 3.87160289e+02,
	 3.87160289e+02, 3.87233130e+02, 3.87448471e+02, 3.87796899e+02,
	 3.88263187e+02, 3.88826955e+02, 3.89463565e+02, 3.90145194e+02,
	 3.90842050e+02, 3.91523679e+02, 3.92160289e+02, 3.92724057e+02,
	 3.93190345e+02, 3.93538774e+02, 3.93754114e+02, 3.93826955e+02,
	 3.93826955e+02, 3.93899797e+02, 3.94115137e+02, 3.94463565e+02,
	 3.94929853e+02, 3.95493622e+02, 3.96130232e+02, 3.96811861e+02,
	 3.97508717e+02, 3.98190345e+02, 3.98826955e+02, 3.99390724e+02,
	 3.99857012e+02, 4.00205440e+02, 4.00420781e+02, 4.00493622e+02,
	 4.00493622e+02, 4.00615024e+02, 4.00973925e+02, 4.01554639e+02,
	 4.02331785e+02, 4.03271400e+02, 4.04332417e+02, 4.05468464e+02,
	 4.06629891e+02, 4.07765939e+02, 4.08826955e+02, 4.09766570e+02,
	 4.10543716e+02, 4.11124430e+02, 4.11483331e+02, 4.11604733e+02 };
	 
	real Alts [] = {     0.        ,   107.54133497,   425.46526751,   939.87699619,
	  1628.29426004,  2460.62992126,  3400.50691745,  4406.84811384,
	  5435.6715712 ,  6442.01276759,  7381.88976378,  8214.22542499,
	  8902.64268885,  9417.05441753,  9734.97835007,  9842.51968504,
	  9842.51968504, 10021.75524333, 10551.62846422, 11408.98134535,
	 12556.34345178, 13943.56955381, 15510.03121412, 17187.26654144,
	 18901.9723037 , 20579.20763103, 22145.66929134, 23532.89539336,
	 24680.25749979, 25537.61038093, 26067.48360182, 26246.7191601 ,
	 26246.7191601 , 26342.35925401, 26625.09960467, 27082.58310205,
	 27694.81552204, 28435.03937008, 29270.90331202, 30165.87608268,
	 31080.84307742, 31975.81584808, 32811.67979003, 33551.90363807,
	 34164.13605806, 34621.61955543, 34904.3599061 , 35000.        ,
	 35000.        , 35000.        , 35000.        , 35000.        ,
	 35000.        , 35000.        , 35000.        , 35000.        ,
	 35000.        , 35000.        , 35000.        , 35000.        ,
	 35000.        , 35000.        , 35000.        , 35000.        ,
	 35000.        , 34904.3599061 , 34621.61955543, 34164.13605806,
	 33551.90363807, 32811.67979003, 31975.81584808, 31080.84307742,
	 30165.87608268, 29270.90331202, 28435.03937008, 27694.81552204,
	 27082.58310205, 26625.09960467, 26342.35925401, 26246.7191601 ,
	 26246.7191601 , 26175.02493679, 25963.07564843, 25620.13449598,
	 25161.18965341, 24606.2992126 , 23979.71454847, 23308.82041754,
	 22622.93811264, 21952.04398171, 21325.45931759, 20770.56887678,
	 20311.6240342 , 19968.68288175, 19756.73359339, 19685.03937008,
	 19685.03937008, 19613.34514676, 19401.39585841, 19058.45470595,
	 18599.50986338, 18044.61942257, 17418.03475845, 16747.14062752,
	 16061.25832261, 15390.36419168, 14763.77952756, 14208.88908675,
	 13749.94424418, 13407.00309172, 13195.05380337, 13123.35958005,
	 13123.35958005, 13051.66535674, 12839.71606838, 12496.77491593,
	 12037.83007336, 11482.93963255, 10856.35496842, 10185.46083749,
	  9499.57853259,  8828.68440166,  8202.09973753,  7647.20929672,
	  7188.26445415,  6845.3233017 ,  6633.37401334,  6561.67979003,
	  6561.67979003,  6489.98556671,  6278.03627835,  5935.0951259 ,
	  5476.15028333,  4921.25984252,  4294.6751784 ,  3623.78104747,
	  2937.89874256,  2267.00461163,  1640.41994751,  1085.5295067 ,
	   626.58466412,   283.64351167,    71.69422331,    0.         };
	   
	real Machs [] = { 0.36732944, 0.36746532, 0.36786789, 0.36852205, 0.36940292, 0.37047634,
	 0.37169968, 0.37302293, 0.37439033, 0.37574236, 0.3770183 , 0.37815907,
	 0.37911039, 0.37982591, 0.38027014, 0.38042076, 0.57823955, 0.57862171,
	 0.5797559 , 0.58160514, 0.58410759, 0.58717639, 0.59070002, 0.59454345,
	 0.59855069, 0.60254916, 0.60635623, 0.60978816, 0.61267079, 0.61485148,
	 0.61621082, 0.61667267, 0.73351591, 0.73380955, 0.73467967, 0.73609409,
	 0.7379997 , 0.74032343, 0.74297376, 0.74584307, 0.74881087, 0.7517481 ,
	 0.75452255, 0.75700519, 0.75907704, 0.76063628, 0.76160473, 0.76193315,
	 0.7768077 , 0.7768077 , 0.7768077 , 0.7768077 , 0.7768077 , 0.7768077 ,
	 0.7768077 , 0.7768077 , 0.7768077 , 0.7768077 , 0.7768077 , 0.7768077 ,
	 0.7768077 , 0.7768077 , 0.7768077 , 0.7768077 , 0.74170483, 0.74138513,
	 0.7404424 , 0.73892455, 0.73690771, 0.73449098, 0.73179018, 0.72893093,
	 0.72604193, 0.72324879, 0.72066882, 0.71840679, 0.71655177, 0.7151749 ,
	 0.71432788, 0.71404204, 0.6329009 , 0.63271117, 0.63215127, 0.63124846,
	 0.63004624, 0.62860175, 0.62698241, 0.62526226, 0.62351812, 0.62182603,
	 0.62025797, 0.61887912, 0.61774554, 0.61690252, 0.61638321, 0.61620784,
	 0.53720683, 0.53705408, 0.53660324, 0.53587615, 0.53490769, 0.53374369,
	 0.53243831, 0.5310511 , 0.52964395, 0.52827823, 0.52701213, 0.5258984 ,
	 0.52498252, 0.52430123, 0.52388148, 0.52373972, 0.46212328, 0.4619983 ,
	 0.46162941, 0.46103438, 0.46024163, 0.45928854, 0.45821934, 0.4570827 ,
	 0.45592928, 0.45480941, 0.45377085, 0.45285699, 0.45210527, 0.45154597,
	 0.45120133, 0.45108492, 0.43604876, 0.43593633, 0.43560444, 0.43506902,
	 0.43435554, 0.43349753, 0.4325347 , 0.43151079, 0.43047142, 0.42946193,
	 0.42852545, 0.42770116, 0.42702295, 0.42651825, 0.42620721, 0.42610215 };
	 
	real ThrustReq [] = { 8969.34, 8969.2 , 8969.01, 8969.49, 8971.62, 8976.53, 8985.19, 8998.23,
	 9015.66, 9036.84, 9060.4 , 9084.39, 9106.5 , 9124.39, 9136.04, 9140.08,
	 8077.51, 8064.2 , 8025.61, 7965.54, 7889.8 , 7805.41, 7719.75, 7639.6 ,
	 7570.37, 7515.47, 7476.03, 7450.98, 7437.51, 7431.84, 7430.27, 7430.08,
	 6205.93, 6201.82, 6190.  , 6171.92, 6149.78, 6126.23, 6104.03, 6085.58,
	 6072.67, 6066.12, 6065.7 , 6070.12, 6077.32, 6084.88, 6090.51, 6092.58,
	 5064.38, 5053.02, 5019.74, 4966.85, 4897.86, 4817.1 , 4729.25, 4638.94,
	 4550.44, 4467.41, 4392.89, 4329.23, 4278.16, 4240.9 , 4218.26, 4210.67,
	 2625.72, 2626.54, 2629.34, 2634.98, 2644.65, 2659.47, 2680.18, 2706.88,
	 2738.82, 2774.46, 2811.55, 2847.37, 2879.07, 2903.95, 2919.84, 2925.3 ,
	 2203.69, 2205.92, 2212.62, 2223.87, 2239.71, 2260.06, 2284.59, 2312.64,
	 2343.22, 2374.97, 2406.23, 2435.21, 2460.09, 2479.21, 2491.25, 2495.37,
	 1896.63, 1898.42, 1903.83, 1912.94, 1925.83, 1942.46, 1962.6 , 1985.75,
	 2011.08, 2037.48, 2063.56, 2087.8 , 2108.65, 2124.7 , 2134.82, 2138.27,
	 1600.29, 1601.72, 1606.06, 1613.4 , 1623.85, 1637.42, 1653.98, 1673.14,
	 1694.24, 1716.33, 1738.26, 1758.7 , 1776.34, 1789.94, 1798.53, 1801.46,
	 2572.37, 2574.76, 2581.91, 2593.77, 2610.2 , 2630.93, 2655.46, 2683.03,
	 2712.6 , 2742.86, 2772.31, 2799.34, 2822.36, 2839.96, 2851.01, 2854.77 };
			   
	int i;
	real err = 0.;
	real err_loc = 0;
	
	real MissionFuelBurn = 0;
	
	CASE = 1;
	for(i = 0; i<Alts.entries(); i++)
	{
		Eng.Amb.alt_in = Alts[i];
		Eng.Amb.MN_in = Machs[i];
		//cout<<Eng.Amb.alt_in<<"\t"<<Eng.Amb.MN_in<<endl;
		Eng.Pset
		{
			setOption("switchLimitSet","STD");
			setOption("switchParm","THRUST");
			parm_in = ThrustReq[i];
		}
		autoSolverSetup();
		//printSolverDetails();
		run();
		if(solver.converged == 0)
		{   solver.defaultDxLimit = 0.05;
			cout<<"Rerunning point"<<endl;
			autoSolverSetup();
			run();
		}
		
		run();
		if(abs(Eng.Perf.Fn - ThrustReq[i])>err)
		{
			err = abs(Eng.Perf.Fn - ThrustReq[i]);
			err_loc = ThrustReq[i];
		}
		OffDes.update();
		cout<<"#";
		CASE++;
		if (i>0)
		{
			MissionFuelBurn += 60*(Time[i] - Time[i-1])*Eng.Core.BrnPri.Wfuel;
		}
	}
	// This bit is just to run the engine back to the start in case you want to loop...
	// NOT Required 
	// for(i = Alts.entries()-1; i>=0; i--)
	// {
		// Eng.Amb.alt_in = Alts[i];
		// Eng.Amb.MN_in = Machs[i];
		// //cout<<Eng.Amb.alt_in<<"\t"<<Eng.Amb.MN_in<<endl;
		// Eng.Pset
		// {
			// setOption("switchLimitSet","STD");
			// setOption("switchParm","THRUST");
			// parm_in = ThrustReq[i];
		// }
		// autoSolverSetup();
		// //printSolverDetails();
		// run();
		// if(solver.converged == 0)
		// {   solver.defaultDxLimit = 0.05;
			// cout<<"Rerunning point"<<endl;
			// autoSolverSetup();
			// run();
		// }
		// run();
		// cout<<"-";
	// }
	// CASE = 0;
	
	cout<<endl;
	cout<< CASE << " off-design case(s) run"<<endl;
	cout<< "Max Thrust Error = "<<err<<" lbf, at "<<err_loc<<" lbf"<<endl;
	cout<< "Total Fuel burn  = "<<MissionFuelBurn<<" lbm"<<endl;
	