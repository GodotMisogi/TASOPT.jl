#ifndef __CUSTOMERPOWEREXTRACT__
#define __CUSTOMERPOWEREXTRACT__

/******************************************************************************
*   Copyright 2003.  The U.S. Government, as Represented by the Administrator
*     of the National Aeronautics and Space Administration (NASA).
*   Copyright 2009.  The Ohio Aerospace Institute, on behalf of the NPSS(TM)
*     Consortium.  All rights reserved.  Includes content licensed from the 
*     U.S. Government, National Aeronautics and Space Administration under 
*     United States Copyright Registration Numbers  V3503D364 and V3482D344.
*******************************************************************************/
//
// For further information contact support@wolverine-ventures.com
//


#include <InterpIncludes.ncp>


class CustomerPowerExtract extends Element {

//------------------------------------------------------------
//     ******* DOCUMENTATION *******
//------------------------------------------------------------

  title ="";

  description = isA() + " will calculate customer HP power extraction.
  please see usageNotes";

  usageNotes ="
  This element extracts power from the requested shaft.
";

  background = "";

//------------------------------------------------------------
//  SETUP VARIABLES
//------------------------------------------------------------
  real pwr {
    value = 0.0; units = "hp"; IOstatus = "output";
    description = "Power extraction, overall";
  }
  real pwr_dmd {
    value = 0.0; units = "hp"; IOstatus = "output";
    description = "Power extraction demand";
  }
  real pwr_in {
    value = 0.0; units = "hp"; IOstatus = "input";
    description = "User requested power extraction";
  }
  real pwrRef {
    value = 0.0; units = "hp"; IOstatus = "output";
    description = "Reference Power extraction";
  }
  string pwrRefName {
    value = "";  IOstatus = "input";
    description = "Variable name that provides pwrRef value";
//  ptrType = "ShaftOutputPort" or = "Element"; // instead this is in VCinit()
  }
  real pwrqpwrRef_in {
    value = 0.0; units = "none"; IOstatus = "input";
    description = "User requested power extraction ratio referenced to pwrRef";
  }
  real trq {
    value = 0.0; units = "ft*lbf"; IOstatus = "output";
    description = "Torque extraction, overall";
  }
  real trq_in {
    value = 0.0; units = "ft*lbf"; IOstatus = "input";
    description = "User requested torque extraction";
  }
  

  // -----------------------
  //  OPTION VARIABLE SETUP
  // -----------------------
  Option switchPwr {
    allowedValues = { "OFF=0", "INPUT=1", "FRAC=2", "INPUT+FRAC=12", "CALCULATE=99", "CUSTOM=100" }
    IOstatus = "input";
    description="Customer Power Extraction Option
 |-----------------|-----------------|----------------------------------------|
 | switchPwr       | Input Parameter |               Description              |
 |-----------------|-----------------|----------------------------------------|
 | OFF           0 |                 | User requested power extraction off    |
 |-----------------|-----------------|----------------------------------------|
 | INPUT         1 | pwr_in          | User requested power extraction        |
 |-----------------|-----------------|----------------------------------------|
 | FRAC          2 | pwqpwrRef_in    | User requested power extraction        |
 |                 |                 | fraction referenced to pwrRef          |
 |-----------------|-----------------|----------------------------------------|
 | INPUT+FRAC   12 | pwr_in          | User requested power extraction        |
 |                 | pwqpwrRef_in    | User requested power extraction        |
 |                 |                 | fraction referenced to pwrRef          |
 |-----------------|-----------------|----------------------------------------|
 | CALCULATE    99 | all above       | Combined effects power extraction      |
 |-----------------|-----------------|----------------------------------------|
 | CUSTOM      100 |                 | Customer supplied hook/custom function |
 |-----------------|-----------------|----------------------------------------|
";
    trigger = FALSE;
    value = "CALCULATE";
  }
  switchPwr = "CALCULATE";  //set default


  //----------------------------------------------------------------------
  // DEFINE INTERNAL VARIABLES
  //----------------------------------------------------------------------
  real _Nmech {
    value=0.0; IOstatus="output"; units="rpm";
    description="Shaft Speed";
  }
  

//------------------------------------------------------------
//  SOCKETS
//------------------------------------------------------------

 
  Socket S_customPwr {
    allowedValues = { "pwr_dmd" }
    description = "Power Extraction socket";
    socketType = "CUSTOM_HOOK";
  }

//------------------------------------------------------------
//  SETUP PORTS
//------------------------------------------------------------
//  ShaftOutputPort Sh_O {
 //   description = "Shaft port connection";
  //}

//------------------------------------------------------------
// VARIABLE CHANGED METHODOLOGY
//------------------------------------------------------------
  void variableChanged( string name, any oldVal ) {
    variableChangedTBName(name, oldVal);
  }

//------------------------------------------------------------
//  PERFORM ENGINEERING CALCULATIONS
//------------------------------------------------------------

  void calculate () {
// calculate HPX demand

    if(      switchPwr == "OFF"        ) { pwr_dmd = 0.0; }
    else if( switchPwr == "INPUT"      ) { pwr_dmd = pwr_in; }
    else if( switchPwr == "FRAC"       ) { pwr_dmd =        pwrRef_in * pwrRef; }
    else if( switchPwr == "INPUT+FRAC" ) { pwr_dmd = pwr_in + pwrRef_in * pwrRef; }
    else if( switchPwr == "CALCULATE"  ) { pwr_dmd = HPXSchedule(); }
    else if( switchPwr == "CUSTOM" ) {
      pwr_dmd = 0.0;
      if( !S_customPwr.isEmpty() ) { S_customPwr.execute(); } //returns pwr_dmd
    }
 
   }
  real HPXSchedule() {
    real _pwr=100;
 
    return _pwr;
  }
 
}
#endif