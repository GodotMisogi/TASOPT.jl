//------------------------------------------------------------------------
//                                                                       |
//   File Name:     PoddedPropulsor.mdl                                  |
//   Date(s):       July 28th, 2021                                      |
//   Author:        Prakash Prashanth                                    |
//                                                                       |
//   Description:   Ducted fan for turbo-electric with Motor             |
//                                                                       |
//------------------------------------------------------------------------

//------------------------------------------------------------------------
//                            Model Definition 
//------------------------------------------------------------------------

Assembly Assembly PodProp
{
    // 1. Assembly level elements for solution control, interfacing, and power setting
	Option switchDes {
		description = "Determines if the ducted fan assembly is in design or off-design mode";
		IOstatus = "input";
		rewritableValues = FALSE;
		trigger = TRUE;
		allowedValues = {"DESIGN","OFFDESIGN"};
	}
    // 2. Free Stream definition - establish ambient conditions
    // ------------------------------
    // Ambient Amb
    // ------------------------------
    Element Ambient Amb
    {
        setOption( "switchMode", "ALDTMN" );
        setOption( "switchDay" , "STD" );
        alt_in    = 0.0 "ft";
        dTs_in    = 0.0 "dF";
        MN_in     = 0.25;
    }
    // 3. Flow start
    // ------------------------------
    // InletStart FsEng
    // ------------------------------
    Element InletStart FsEng
    {
        AmbientName = "Amb";
        setOption("switchInd" , "W");
		//Precalculate how much airflow needs to go through for a given area, 
		//MN and flow conditions.	
        W_in = 60.0;
		real theta_0;
		void postexecute(){
			theta_0 = Fl_O.Tt/518.67;
		}
    }
    // 4. Inlet
    // ------------------------------
    // Inlet InEng
    // ------------------------------
    Element Inlet InEng
    {
		PqP_in = 0.998;		
		Fl_O.MNdes = 0.5;

        // Account for inlet KE defect if ingesting BL:
        real sbar, Kinl, asq;
        real W, Ts, Rs, gam;
        real Pt2, Tt2; 
        Kinl = 0.e3; // Based of D8 fuselage TE KE defect as an example. 
                     // Needs to be reset in the run file correctly!
        void postexecute()
        {
            W  = Fl_O.W *getUnitsFactor(Fl_O.W.units, "kg/sec");
            Ts = Fl_O.Ts * 100/180;
            Rs = Fl_O.Rs *getUnitsFactor(Fl_I.Rs.units, "J/(kg*K)");
            gam = Fl_O.gams;
            asq = gam * Rs * Ts;
            sbar = (gam * Kinl)/(W * asq);
            Pt2 = Fl_O.Pt/exp(sbar); // psia
            Tt2 = Fl_O.Tt;           // dR

            Fl_O.setTotalTP(Tt2, Pt2);

        }
	}

    Element Compressor Fan 
    {
		PRdes  = 1.4;
		effDes = 0.91;
		#include "fanCFM56.map"
		Sh_O.inertia = 10.;     // slugs-ft**2.
		real dia {value = 0; units = "in";}
        real dT, Ts, Rs, a, Vtip;
        real HTR, Mtip; // Hub-tip ratio and Mtip
        HTR = 0.34;
		void postexecute()
		{
			dia	= (Fl_I.Aphy*4/3.1415/(1-HTR**2))**0.5;
			dT = (Fl_O.Tt - Fl_I.Tt)*100/180; //temp diff in K

            Ts = Fl_I.Ts * 100/180;
            Rs = Fl_I.Rs *getUnitsFactor(Fl_I.Rs.units, "J/(kg*K)");

            a  = sqrt(Fl_I.gams * Ts *Rs);
            Vtip = 2*PI*Nmech/60 * dia/2 * getUnitsFactor(dia.units, "m");
            Mtip = sqrt((Vtip/a)**2 + Fl_I.MN**2);
		}
		Fl_O.MNdes = 0.3;
	}	

    Element Duct FanDuct
    {
        switchDP = "INPUT";

		void preexecute()
		{
			dPqP_in = 0.1 * Fl_I.MN * Fl_I.MN;
		}
		Fl_O.MNdes = 0.4;
    }

    Element Nozzle FanNozzle
    {
        PsExhName = "Amb.Ps";
		switchType = "CONIC";
		switchCoef = "CV";
		Cv_in = 0.99;
    }

    Element FlowEnd FlowEnd{
    }

    Element EMachine Motor{
        switchMode = "MOTOR";
        ShP = 1e6 "W";
        g = 4e-3 "m";
        // Js = 9e6;
        nparallel = 1;
        void preexecute(){
			rhoair = InEng.Fl_I.rhos *getUnitsFactor(InEng.Fl_I.rhos.units,"kg/m3");
			muair  = InEng.Fl_I.mus*getUnitsFactor(InEng.Fl_I.mus.units , "kg/(m*sec)");
		}
    }
    Element Gearbox GB {
		eff = 1.0;
		gearRatio = 3.;  
	}

    Element Shaft MotorShaft
	{
		ShaftInputPort GBOX, Sh_Motor;
		Nmech = 15000.0;
		// inertia = 13.0;
    }

    Element Shaft FanShaft
	{
		ShaftInputPort Sh_Fan, GBOX;
		Nmech = 4000.0;
		// inertia = 13.0;
    }
    
    real mdot, Vjet, Vin, Fn_N, ShP_W, dKE;
    real eta_prop, eta_DF; // Froude propulsive eff, overall ducted fan eff.
    real Phiinl, Finl;
    Finl   = 0.0;
    Phiinl = 0.0e3; // Example value based on D8
    real Wfan, rSnace, fpylon, Snace1;
    void postexecute()
    {
        Vjet  = FanNozzle.Vactual*getUnitsFactor(FanNozzle.Vactual.units, "m/sec");
        Vin   = InEng.Fl_I.V * getUnitsFactor(InEng.Fl_I.V.units, "m/sec" );
        mdot  = InEng.Fl_I.W * getUnitsFactor(InEng.Fl_I.W.units, "kg/sec");
        ShP_W = Motor.ShP    * getUnitsFactor(Motor.ShP.units, "W"     );
        // Effective added thrust from BLI:
        
        if(Vin > 0.0){
            Finl = Phiinl/Vin;
        }

        Fn_N = mdot*(Vjet - Vin) + Finl;
        dKE  = 0.5* mdot*(Vjet**2 - Vin**2);
        //mdot*(FanNozzle.Fl_O.ht - InEng.Fl_I.ht)*getUnitsFactor(InEng.Fl_I.ht.units, "J/kg");
            

        eta_prop = Fn_N*Vin/dKE;
        eta_DF   = Fn_N*Vin/ShP_W; 

        //---------------------------------------------
        // Weights
        //---------------------------------------------
        if (switchDes == "DESIGN"){
        real Dfan   = Fan.dia*0.0254;
        real ARfan  = 3;   //Blade aspeect ratio
        real bladesolidity = 0.4; // Blade solidity c/s
        real ktech = 0.5 ;
        real Utip  = Dfan/2* (2 * PI * Fan.Nmech/60);
        // # Sagerser 1971, NASA TM X-2406
        // # Note: The term "weight" in Sagerser1971 is actually mass
        real mfan = ktech*(135.0 * Dfan**2.7/sqrt(ARfan) * (bladesolidity/1.25)**0.3 * (Utip/350.0)**0.3);

        Snace1 = rSnace * 0.25 * PI * Dfan**2;
        real Ainlet = 0.4*Snace1;
        real Acowl  = 0.2*Snace1;
        real Aexh   = 0.4*Snace1;

        real Wnace = 4.45*(Ainlet/0.3048**2.0) * (2.5+0.0238*Dfan/0.0254) +
                4.45*(Acowl /0.3048**2.0) *  1.9 +
                4.45*(Aexh  /0.3048**2.0) * (2.5+0.0363*Dfan/0.0254);

        Wfan = (mfan*9.81 + Wnace*0.8)*(1+fpylon);
        }

    }
    //------------------------------------------------------------------------
	// Component Links
	//------------------------------------------------------------------------

    linkPorts( "FsEng.Fl_O"     , "InEng.Fl_I"     , "F010"  ) ;
	linkPorts( "InEng.Fl_O"     , "Fan.Fl_I"       , "F020"  ) ;
	linkPorts( "Fan.Fl_O"       , "FanDuct.Fl_I"   , "F025"  ) ;
	linkPorts( "FanDuct.Fl_O"   , "FanNozzle.Fl_I" , "F030"  ) ;
	linkPorts( "FanNozzle.Fl_O" , "FlowEnd.Fl_I"   , "F090"  ) ;

    linkPorts( "Fan.Sh_O"        , "FanShaft.Sh_Fan"      ,  "FanWork"   ) ;
    linkPorts( "GB.Sh_O1"        , "FanShaft.GBOX"        ,  "GBOX1"   ) ;
    linkPorts( "GB.Sh_O2"        , "MotorShaft.GBOX"      ,  "GBOX2"   ) ;
    linkPorts( "Motor.Sh_O"      , "MotorShaft.Sh_Motor"  ,  "MotorWork" ) ;

    // 1 Shaft power and thrust
    Independent ind_ShaftPower{ varName = "Motor.ShP"; description = "ShaftPower from motor"; }
    Dependent dep_Fn{ eq_lhs = "Fn_N"; eq_rhs = "Fn_target";}
    // 2 Fan mass flow/size and Mtip
    Independent ind_Win{ varName = "FsEng.W_in"; description = "Mass flow rate"; }
    Dependent dep_Mtip{ eq_lhs = "Fan.Mtip"; eq_rhs = "1.2";}
    // 3 Indep to allow shaft torque to go to zero - that dep is auto set by the shaft element
    Independent ind_Nmech{ varName = "FanShaft.Nmech"; description = "Nmech"; }

    // Off-des
    // 1 Vary shaft power to match input electric power to motor
    Independent ind_MotorShP{varName = "Motor.ShP"; }
    Dependent dep_MotorPelec{eq_lhs = "Motor.Pelec"; eq_rhs = "Pelecmotor";}



    void variableChanged(string name, any oldval)
	{
		if (name == "switchDes")
		{
			if (switchDes == "DESIGN")
			{
				// ind_ShaftPower.autoSetup = TRUE;  // for integrated approach handle this in the TEsys
                // dep_Fn.autoSetup         = TRUE;  //   with total thrust
                
                ind_Win.autoSetup        = TRUE;
                dep_Mtip.autoSetup       = TRUE;
                
                ind_Nmech.autoSetup      = TRUE;

                ind_MotorShP.autoSetup   = FALSE;
                dep_MotorPelec.autoSetup = FALSE;

			}
			else if (switchDes == "OFFDESIGN")
			{
				ind_ShaftPower.autoSetup = FALSE;
                dep_Fn.autoSetup         = FALSE;
                
                ind_Win.autoSetup        = FALSE;
                dep_Mtip.autoSetup       = FALSE;
                
                ind_Nmech.autoSetup      = FALSE;

                // ind_MotorShP.autoSetup   = TRUE;  // for integrated approach handle this in the TEsys
                // dep_MotorPelec.autoSetup = TRUE;  //   with total thrust

			}
		}
	}

    void OFFDES2(){
                setOption("switchDes", "OFFDESIGN");
                ind_Win.autoSetup        = FALSE; // The mass flow rate is automatically added by the NPSS solver
				ind_ShaftPower.autoSetup = TRUE;	
                dep_Fn.autoSetup         = TRUE;	
                dep_NcPct.autoSetup      = FALSE;	
                
                dep_Mtip.autoSetup       = FALSE;
                ind_Nmech.autoSetup      = FALSE;	

                dep_ShP_in.autoSetup     = FALSE;
    }

}